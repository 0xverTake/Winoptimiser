#!/usr/bin/env python3
"""
Windows Optimizer Python Version
Version avanc√©e de l'optimiseur Windows avec interface graphique moderne
Inclut une fonction de restauration des param√®tres d'origine
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import customtkinter as ctk
from customtkinter import CTkFont
import winreg
import subprocess
import psutil
import os
import sys
import json
import threading
from datetime import datetime
import webbrowser

class WindowsOptimizer:
    def __init__(self):
        # Configuration de l'apparence
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        # Fen√™tre principale
        self.root = ctk.CTk()
        self.root.title("Windows Optimizer Python - v1.0")
        self.root.geometry("1000x700")
        self.root.iconbitmap("optimizer.ico") if os.path.exists("optimizer.ico") else None
        
        # Variables
        self.backup_file = "optimizer_backup.json"
        self.original_settings = {}
        self.is_admin = self.check_admin()
        
        # Interface utilisateur
        self.setup_ui()
        
        # Charger la sauvegarde si elle existe
        self.load_backup()
        
    def check_admin(self):
        """V√©rifie si le script est ex√©cut√© en tant qu'administrateur"""
        try:
            return ctypes.windll.shell32.IsUserAnAdmin()
        except:
            return False
    
    def setup_ui(self):
        """Configuration de l'interface utilisateur"""
        # Frame principal
        main_frame = ctk.CTkFrame(self.root)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Titre
        title_label = ctk.CTkLabel(
            main_frame, 
            text="üöÄ Windows Optimizer Python", 
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(pady=20)
        
        # V√©rification admin
        if not self.is_admin:
            warning_label = ctk.CTkLabel(
                main_frame,
                text="‚ö†Ô∏è Ex√©cutez en tant qu'administrateur pour toutes les fonctionnalit√©s",
                text_color="orange"
            )
            warning_label.pack(pady=5)
        
        # Notebook pour les onglets
        self.notebook = ctk.CTkTabview(main_frame)
        self.notebook.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Onglets
        self.setup_performance_tab()
        self.setup_privacy_tab()
        self.setup_services_tab()
        self.setup_cleanup_tab()
        self.setup_restore_tab()
        self.setup_about_tab()
        
        # Boutons principaux
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill="x", padx=20, pady=10)
        
        self.apply_btn = ctk.CTkButton(
            button_frame,
            text="üîß Appliquer les optimisations",
            command=self.apply_optimizations,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.apply_btn.pack(side="left", padx=10, pady=10)
        
        self.restore_btn = ctk.CTkButton(
            button_frame,
            text="üîÑ Restaurer param√®tres d'origine",
            command=self.restore_original_settings,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="orange"
        )
        self.restore_btn.pack(side="right", padx=10, pady=10)
        
        # Zone de log
        self.log_text = scrolledtext.ScrolledText(
            main_frame, 
            height=8, 
            bg="#2b2b2b", 
            fg="white",
            font=("Consolas", 10)
        )
        self.log_text.pack(fill="x", padx=20, pady=(0, 10))
        
    def setup_performance_tab(self):
        """Onglet optimisations de performance"""
        self.notebook.add("üöÄ Performance")
        perf_frame = self.notebook.tab("üöÄ Performance")
        
        # Variables de contr√¥le
        self.perf_vars = {}
        
        options = [
            ("disable_telemetry", "D√©sactiver la t√©l√©m√©trie Windows"),
            ("disable_cortana", "D√©sactiver Cortana"),
            ("disable_onedrive", "D√©sactiver OneDrive"),
            ("optimize_visual_effects", "Optimiser les effets visuels"),
            ("disable_startup_delay", "Supprimer le d√©lai de d√©marrage"),
            ("optimize_network", "Optimiser les param√®tres r√©seau"),
            ("disable_background_apps", "Limiter les applications en arri√®re-plan"),
            ("optimize_gaming", "Optimisations pour les jeux"),
        ]
        
        for key, text in options:
            self.perf_vars[key] = ctk.BooleanVar()
            checkbox = ctk.CTkCheckBox(perf_frame, text=text, variable=self.perf_vars[key])
            checkbox.pack(anchor="w", padx=20, pady=5)
    
    def setup_privacy_tab(self):
        """Onglet confidentialit√©"""
        self.notebook.add("üîí Confidentialit√©")
        privacy_frame = self.notebook.tab("üîí Confidentialit√©")
        
        self.privacy_vars = {}
        
        options = [
            ("disable_location", "D√©sactiver les services de localisation"),
            ("disable_advertising_id", "D√©sactiver l'ID publicitaire"),
            ("disable_feedback", "D√©sactiver les demandes de commentaires"),
            ("disable_tailored_experiences", "D√©sactiver les exp√©riences personnalis√©es"),
            ("disable_speech_recognition", "D√©sactiver la reconnaissance vocale"),
            ("disable_handwriting", "D√©sactiver la collecte d'√©criture manuscrite"),
            ("disable_camera_access", "Restreindre l'acc√®s √† la cam√©ra"),
            ("disable_microphone_access", "Restreindre l'acc√®s au microphone"),
        ]
        
        for key, text in options:
            self.privacy_vars[key] = ctk.BooleanVar()
            checkbox = ctk.CTkCheckBox(privacy_frame, text=text, variable=self.privacy_vars[key])
            checkbox.pack(anchor="w", padx=20, pady=5)
    
    def setup_services_tab(self):
        """Onglet services Windows"""
        self.notebook.add("‚öôÔ∏è Services")
        services_frame = self.notebook.tab("‚öôÔ∏è Services")
        
        self.service_vars = {}
        
        services = [
            ("DiagTrack", "Service de t√©l√©m√©trie"),
            ("dmwappushservice", "Service de messages push"),
            ("WSearch", "Windows Search"),
            ("SysMain", "Superfetch"),
            ("Themes", "Th√®mes Windows"),
            ("Spooler", "Spouleur d'impression"),
            ("BITS", "Service de transfert intelligent"),
            ("wuauserv", "Windows Update"),
        ]
        
        for service, description in services:
            self.service_vars[service] = ctk.BooleanVar()
            checkbox = ctk.CTkCheckBox(
                services_frame, 
                text=f"{description} ({service})", 
                variable=self.service_vars[service]
            )
            checkbox.pack(anchor="w", padx=20, pady=5)
    
    def setup_cleanup_tab(self):
        """Onglet nettoyage syst√®me"""
        self.notebook.add("üßπ Nettoyage")
        cleanup_frame = self.notebook.tab("üßπ Nettoyage")
        
        self.cleanup_vars = {}
        
        options = [
            ("temp_files", "Fichiers temporaires"),
            ("recycle_bin", "Corbeille"),
            ("browser_cache", "Cache des navigateurs"),
            ("windows_logs", "Journaux Windows"),
            ("crash_dumps", "Fichiers de vidage sur incident"),
            ("thumbnail_cache", "Cache des miniatures"),
            ("prefetch_files", "Fichiers Prefetch"),
            ("recent_documents", "Documents r√©cents"),
        ]
        
        for key, text in options:
            self.cleanup_vars[key] = ctk.BooleanVar()
            checkbox = ctk.CTkCheckBox(cleanup_frame, text=text, variable=self.cleanup_vars[key])
            checkbox.pack(anchor="w", padx=20, pady=5)
        
        # Bouton de nettoyage
        cleanup_btn = ctk.CTkButton(
            cleanup_frame,
            text="üßπ Nettoyer maintenant",
            command=self.run_cleanup,
            height=35
        )
        cleanup_btn.pack(pady=20)
    
    def setup_restore_tab(self):
        """Onglet restauration"""
        self.notebook.add("üîÑ Restauration")
        restore_frame = self.notebook.tab("üîÑ Restauration")
        
        info_label = ctk.CTkLabel(
            restore_frame,
            text="Cette section permet de restaurer les param√®tres Windows d'origine",
            font=ctk.CTkFont(size=14)
        )
        info_label.pack(pady=20)
        
        # Informations sur la sauvegarde
        if os.path.exists(self.backup_file):
            backup_info = ctk.CTkLabel(
                restore_frame,
                text=f"‚úÖ Sauvegarde trouv√©e: {self.backup_file}",
                text_color="green"
            )
        else:
            backup_info = ctk.CTkLabel(
                restore_frame,
                text="‚ùå Aucune sauvegarde trouv√©e",
                text_color="red"
            )
        backup_info.pack(pady=10)
        
        # Boutons de restauration
        restore_all_btn = ctk.CTkButton(
            restore_frame,
            text="üîÑ Restaurer tous les param√®tres",
            command=self.restore_all_settings,
            height=40
        )
        restore_all_btn.pack(pady=10)
        
        create_backup_btn = ctk.CTkButton(
            restore_frame,
            text="üíæ Cr√©er une sauvegarde manuelle",
            command=self.create_manual_backup,
            height=40
        )
        create_backup_btn.pack(pady=10)
        
        # Zone d'informations de restauration
        self.restore_info = ctk.CTkTextbox(restore_frame, height=200)
        self.restore_info.pack(fill="both", expand=True, padx=20, pady=20)
        self.update_restore_info()
    
    def setup_about_tab(self):
        """Onglet √† propos"""
        self.notebook.add("‚ÑπÔ∏è √Ä propos")
        about_frame = self.notebook.tab("‚ÑπÔ∏è √Ä propos")
        
        about_text = """
        üöÄ Windows Optimizer Python v1.0
        
        Version Python de l'optimiseur Windows avec interface moderne.
        
        Fonctionnalit√©s:
        ‚Ä¢ Optimisations de performance
        ‚Ä¢ Protection de la confidentialit√©
        ‚Ä¢ Gestion des services Windows
        ‚Ä¢ Nettoyage syst√®me
        ‚Ä¢ Restauration des param√®tres d'origine
        
        ‚ö†Ô∏è Attention: Utilisez cet outil avec pr√©caution.
        Cr√©ez toujours une sauvegarde avant d'appliquer des modifications.
        
        Bas√© sur le projet Optimizer original de hellzerg.
        """
        
        about_label = ctk.CTkLabel(
            about_frame,
            text=about_text,
            font=ctk.CTkFont(size=12),
            justify="left"
        )
        about_label.pack(padx=20, pady=20)
        
        # Bouton GitHub
        github_btn = ctk.CTkButton(
            about_frame,
            text="üåê Projet original sur GitHub",
            command=lambda: webbrowser.open("https://github.com/hellzerg/optimizer")
        )
        github_btn.pack(pady=10)
    
    def log_message(self, message):
        """Ajouter un message au log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update()
    
    def backup_registry_value(self, key_path, value_name, hkey=winreg.HKEY_LOCAL_MACHINE):
        """Sauvegarder une valeur de registre"""
        try:
            with winreg.OpenKey(hkey, key_path) as key:
                value, reg_type = winreg.QueryValueEx(key, value_name)
                backup_key = f"{hkey}\\{key_path}\\{value_name}"
                self.original_settings[backup_key] = {
                    "value": value,
                    "type": reg_type,
                    "hkey": hkey
                }
                return True
        except:
            return False
    
    def set_registry_value(self, key_path, value_name, value, reg_type, hkey=winreg.HKEY_LOCAL_MACHINE):
        """D√©finir une valeur de registre"""
        try:
            with winreg.CreateKey(hkey, key_path) as key:
                winreg.SetValueEx(key, value_name, 0, reg_type, value)
            return True
        except Exception as e:
            self.log_message(f"Erreur lors de la modification du registre: {e}")
            return False
    
    def disable_telemetry(self):
        """D√©sactiver la t√©l√©m√©trie Windows"""
        self.log_message("D√©sactivation de la t√©l√©m√©trie...")
        
        # Sauvegarder avant modification
        self.backup_registry_value(r"SOFTWARE\Policies\Microsoft\Windows\DataCollection", "AllowTelemetry")
        
        # D√©sactiver la t√©l√©m√©trie
        self.set_registry_value(
            r"SOFTWARE\Policies\Microsoft\Windows\DataCollection",
            "AllowTelemetry",
            0,
            winreg.REG_DWORD
        )
        
        # Arr√™ter les services de t√©l√©m√©trie
        services = ["DiagTrack", "dmwappushservice"]
        for service in services:
            try:
                subprocess.run(f'sc stop "{service}"', shell=True, capture_output=True)
                subprocess.run(f'sc config "{service}" start= disabled', shell=True, capture_output=True)
                self.log_message(f"Service {service} arr√™t√© et d√©sactiv√©")
            except:
                self.log_message(f"Impossible d'arr√™ter le service {service}")
    
    def optimize_performance(self):
        """Appliquer les optimisations de performance"""
        self.log_message("Application des optimisations de performance...")
        
        # Optimiser les effets visuels
        if self.perf_vars["optimize_visual_effects"].get():
            self.backup_registry_value(r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects", "VisualFXSetting", winreg.HKEY_CURRENT_USER)
            self.set_registry_value(
                r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects",
                "VisualFXSetting",
                2,  # Optimiser pour les performances
                winreg.REG_DWORD,
                winreg.HKEY_CURRENT_USER
            )
        
        # D√©sactiver le d√©lai de d√©marrage
        if self.perf_vars["disable_startup_delay"].get():
            self.backup_registry_value(r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Serialize", "StartupDelayInMSec", winreg.HKEY_CURRENT_USER)
            self.set_registry_value(
                r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Serialize",
                "StartupDelayInMSec",
                0,
                winreg.REG_DWORD,
                winreg.HKEY_CURRENT_USER
            )
        
        # Optimisations gaming
        if self.perf_vars["optimize_gaming"].get():
            gaming_tweaks = [
                (r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile", "SystemResponsiveness", 1),
                (r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games", "GPU Priority", 8),
                (r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games", "Priority", 6),
            ]
            
            for key_path, value_name, value in gaming_tweaks:
                self.backup_registry_value(key_path, value_name)
                self.set_registry_value(key_path, value_name, value, winreg.REG_DWORD)
    
    def apply_privacy_settings(self):
        """Appliquer les param√®tres de confidentialit√©"""
        self.log_message("Application des param√®tres de confidentialit√©...")
        
        if self.privacy_vars["disable_location"].get():
            self.backup_registry_value(r"SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\location", "Value", winreg.HKEY_LOCAL_MACHINE)
            self.set_registry_value(
                r"SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\location",
                "Value",
                "Deny",
                winreg.REG_SZ
            )
        
        if self.privacy_vars["disable_advertising_id"].get():
            self.backup_registry_value(r"SOFTWARE\Microsoft\Windows\CurrentVersion\AdvertisingInfo", "Enabled", winreg.HKEY_CURRENT_USER)
            self.set_registry_value(
                r"SOFTWARE\Microsoft\Windows\CurrentVersion\AdvertisingInfo",
                "Enabled",
                0,
                winreg.REG_DWORD,
                winreg.HKEY_CURRENT_USER
            )
    
    def manage_services(self):
        """G√©rer les services Windows"""
        self.log_message("Gestion des services Windows...")
        
        for service, var in self.service_vars.items():
            if var.get():
                try:
                    # Arr√™ter et d√©sactiver le service
                    subprocess.run(f'sc stop "{service}"', shell=True, capture_output=True)
                    subprocess.run(f'sc config "{service}" start= disabled', shell=True, capture_output=True)
                    self.log_message(f"Service {service} d√©sactiv√©")
                except:
                    self.log_message(f"Impossible de d√©sactiver le service {service}")
    
    def run_cleanup(self):
        """Ex√©cuter le nettoyage syst√®me"""
        self.log_message("D√©marrage du nettoyage syst√®me...")
        
        if self.cleanup_vars["temp_files"].get():
            temp_dirs = [os.environ.get("TEMP"), r"C:\Windows\Temp"]
            for temp_dir in temp_dirs:
                if temp_dir and os.path.exists(temp_dir):
                    try:
                        for file in os.listdir(temp_dir):
                            file_path = os.path.join(temp_dir, file)
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                        self.log_message(f"Fichiers temporaires supprim√©s de {temp_dir}")
                    except:
                        self.log_message(f"Erreur lors du nettoyage de {temp_dir}")
        
        if self.cleanup_vars["recycle_bin"].get():
            try:
                subprocess.run("rd /s /q C:\\$Recycle.Bin", shell=True, capture_output=True)
                self.log_message("Corbeille vid√©e")
            except:
                self.log_message("Impossible de vider la corbeille")
        
        self.log_message("Nettoyage termin√©")
    
    def save_backup(self):
        """Sauvegarder les param√®tres actuels"""
        try:
            with open(self.backup_file, 'w') as f:
                json.dump(self.original_settings, f, indent=2)
            self.log_message(f"Sauvegarde cr√©√©e: {self.backup_file}")
        except Exception as e:
            self.log_message(f"Erreur lors de la sauvegarde: {e}")
    
    def load_backup(self):
        """Charger la sauvegarde existante"""
        try:
            if os.path.exists(self.backup_file):
                with open(self.backup_file, 'r') as f:
                    self.original_settings = json.load(f)
                self.log_message("Sauvegarde charg√©e")
        except Exception as e:
            self.log_message(f"Erreur lors du chargement de la sauvegarde: {e}")
    
    def restore_original_settings(self):
        """Restaurer les param√®tres d'origine"""
        if not self.original_settings:
            messagebox.showwarning("Attention", "Aucune sauvegarde trouv√©e!")
            return
        
        if messagebox.askyesno("Confirmation", "Voulez-vous vraiment restaurer tous les param√®tres d'origine?"):
            self.log_message("Restauration des param√®tres d'origine...")
            
            for backup_key, backup_data in self.original_settings.items():
                try:
                    parts = backup_key.split("\\")
                    hkey = backup_data["hkey"]
                    key_path = "\\".join(parts[1:-1])
                    value_name = parts[-1]
                    
                    self.set_registry_value(
                        key_path,
                        value_name,
                        backup_data["value"],
                        backup_data["type"],
                        hkey
                    )
                except Exception as e:
                    self.log_message(f"Erreur lors de la restauration de {backup_key}: {e}")
            
            self.log_message("Restauration termin√©e")
            messagebox.showinfo("Succ√®s", "Param√®tres restaur√©s avec succ√®s!")
    
    def restore_all_settings(self):
        """Restaurer tous les param√®tres syst√®me"""
        self.restore_original_settings()
    
    def create_manual_backup(self):
        """Cr√©er une sauvegarde manuelle"""
        self.log_message("Cr√©ation d'une sauvegarde manuelle...")
        
        # Sauvegarder les principales cl√©s de registre
        important_keys = [
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Policies\Microsoft\Windows\DataCollection", "AllowTelemetry"),
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\AdvertisingInfo", "Enabled"),
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects", "VisualFXSetting"),
        ]
        
        for hkey, key_path, value_name in important_keys:
            self.backup_registry_value(key_path, value_name, hkey)
        
        self.save_backup()
        self.update_restore_info()
        messagebox.showinfo("Succ√®s", "Sauvegarde manuelle cr√©√©e!")
    
    def update_restore_info(self):
        """Mettre √† jour les informations de restauration"""
        if hasattr(self, 'restore_info'):
            info_text = "Informations de sauvegarde:\n\n"
            
            if os.path.exists(self.backup_file):
                info_text += f"‚úÖ Fichier de sauvegarde: {self.backup_file}\n"
                info_text += f"üìÖ Derni√®re modification: {datetime.fromtimestamp(os.path.getmtime(self.backup_file))}\n"
                info_text += f"üìä Nombre d'entr√©es sauvegard√©es: {len(self.original_settings)}\n\n"
                
                if self.original_settings:
                    info_text += "Cl√©s sauvegard√©es:\n"
                    for key in list(self.original_settings.keys())[:10]:  # Afficher les 10 premi√®res
                        info_text += f"‚Ä¢ {key}\n"
                    if len(self.original_settings) > 10:
                        info_text += f"... et {len(self.original_settings) - 10} autres\n"
            else:
                info_text += "‚ùå Aucune sauvegarde trouv√©e\n"
                info_text += "Cr√©ez une sauvegarde avant d'appliquer des optimisations.\n"
            
            self.restore_info.delete("1.0", tk.END)
            self.restore_info.insert("1.0", info_text)
    
    def apply_optimizations(self):
        """Appliquer toutes les optimisations s√©lectionn√©es"""
        if not self.is_admin:
            messagebox.showwarning("Attention", "Droits administrateur requis pour certaines optimisations!")
        
        if messagebox.askyesno("Confirmation", "Voulez-vous appliquer les optimisations s√©lectionn√©es?"):
            self.log_message("=== D√âBUT DES OPTIMISATIONS ===")
            
            # Cr√©er une sauvegarde automatique
            if not os.path.exists(self.backup_file):
                self.create_manual_backup()
            
            # Appliquer les optimisations
            threading.Thread(target=self._apply_optimizations_thread, daemon=True).start()
    
    def _apply_optimizations_thread(self):
        """Thread pour appliquer les optimisations"""
        try:
            # Performance
            if any(var.get() for var in self.perf_vars.values()):
                if self.perf_vars["disable_telemetry"].get():
                    self.disable_telemetry()
                self.optimize_performance()
            
            # Confidentialit√©
            if any(var.get() for var in self.privacy_vars.values()):
                self.apply_privacy_settings()
            
            # Services
            if any(var.get() for var in self.service_vars.values()):
                self.manage_services()
            
            self.log_message("=== OPTIMISATIONS TERMIN√âES ===")
            self.root.after(0, lambda: messagebox.showinfo("Succ√®s", "Optimisations appliqu√©es avec succ√®s!\nRed√©marrez votre ordinateur pour que tous les changements prennent effet."))
            
        except Exception as e:
            self.log_message(f"Erreur lors des optimisations: {e}")
            self.root.after(0, lambda: messagebox.showerror("Erreur", f"Erreur lors des optimisations: {e}"))
    
    def run(self):
        """Lancer l'application"""
        self.log_message("Windows Optimizer Python d√©marr√©")
        self.log_message("S√©lectionnez les optimisations d√©sir√©es et cliquez sur 'Appliquer'")
        self.root.mainloop()

if __name__ == "__main__":
    try:
        import ctypes
        app = WindowsOptimizer()
        app.run()
    except ImportError as e:
        print(f"Erreur d'importation: {e}")
        print("Installez les d√©pendances avec: pip install -r requirements.txt")
    except Exception as e:
        print(f"Erreur: {e}")
