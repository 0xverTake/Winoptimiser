#!/usr/bin/env python3
"""
Windows Optimizer Python Version
Version avanc√©e de l'optimiseur Windows avec interface graphique moderne
Inclut une fonction de restauration des param√®tres d'origine
"""

# V√©rification des imports critiques
def check_critical_imports():
    """V√©rifie que tous les modules critiques sont disponibles"""
    critical_modules = {
        'tkinter': 'Interface graphique de base',
        'customtkinter': 'Interface moderne CustomTkinter',
        'winreg': 'Acc√®s au registre Windows',
        'psutil': 'Informations syst√®me',
        'wmi': 'Windows Management Instrumentation',
        'requests': 'Requ√™tes HTTP'
    }
    
    missing_modules = []
    for module, description in critical_modules.items():
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(f"‚ùå {module}: {description}")
    
    if missing_modules:
        print("üö® ERREUR: Modules manquants d√©tect√©s!")
        print("\n".join(missing_modules))
        print("\nüîß Solutions:")
        print("1. Ex√©cutez maintenance.bat")
        print("2. Utilisez l'option 5 du gestionnaire universel")
        print("3. R√©installez les d√©pendances avec: pip install -r requirements.txt")
        input("\nAppuyez sur Entr√©e pour continuer...")
        return False
    return True

# V√©rification avant les imports
if not check_critical_imports():
    sys.exit(1)

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import customtkinter as ctk
from customtkinter import CTkFont
import winreg
import subprocess
import psutil
import os
import sys
import json
import threading
from datetime import datetime
import webbrowser
import wmi
import platform
import time
import re
import requests
from pathlib import Path
import ctypes
from ctypes import wintypes

class WindowsOptimizer:
    def __init__(self):
        # Configuration de l'apparence
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        # Fen√™tre principale
        self.root = ctk.CTk()
        self.root.title("Windows Optimizer Pro - Gaming Edition v2.0")
        self.root.geometry("1200x800")
        self.root.iconbitmap("optimizer.ico") if os.path.exists("optimizer.ico") else None
        
        # Variables
        self.backup_file = "optimizer_backup.json"
        self.original_settings = {}
        self.is_admin = self.check_admin()
        self.wmi_connection = None
        self.gaming_devices = {}
        self.ssd_health_data = {}
        self.monitoring_active = False
        
        # Initialiser WMI AVANT l'interface
        self.init_wmi()
        
        # Interface utilisateur
        self.setup_ui()
        
        # Charger la sauvegarde si elle existe
        self.load_backup()
        
        # D√©marrer le monitoring en arri√®re-plan
        self.start_background_monitoring()
        
    def check_admin(self):
        """V√©rifie si le script est ex√©cut√© en tant qu'administrateur"""
        try:
            return ctypes.windll.shell32.IsUserAnAdmin()
        except:
            return False
    
    def setup_ui(self):
        """Configuration de l'interface utilisateur"""
        # Frame principal
        main_frame = ctk.CTkFrame(self.root)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Titre
        title_label = ctk.CTkLabel(
            main_frame, 
            text="üöÄ Windows Optimizer Python", 
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(pady=20)
        
        # V√©rification admin
        if not self.is_admin:
            warning_label = ctk.CTkLabel(
                main_frame,
                text="‚ö†Ô∏è Ex√©cutez en tant qu'administrateur pour toutes les fonctionnalit√©s",
                text_color="orange"
            )
            warning_label.pack(pady=5)
        
        # Notebook pour les onglets
        self.notebook = ctk.CTkTabview(main_frame)
        self.notebook.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Onglets
        self.setup_performance_tab()
        self.setup_privacy_tab()
        self.setup_services_tab()
        self.setup_cleanup_tab()
        self.setup_gaming_tab()
        self.setup_ssd_monitoring_tab()
        self.setup_restore_tab()
        self.setup_about_tab()
        
        # Boutons principaux
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill="x", padx=20, pady=10)
        
        self.apply_btn = ctk.CTkButton(
            button_frame,
            text="üîß Appliquer les optimisations",
            command=self.apply_optimizations,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.apply_btn.pack(side="left", padx=10, pady=10)
        
        self.restore_btn = ctk.CTkButton(
            button_frame,
            text="üîÑ Restaurer param√®tres d'origine",
            command=self.restore_original_settings,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="orange"
        )
        self.restore_btn.pack(side="right", padx=10, pady=10)
        
        # Zone de log
        self.log_text = scrolledtext.ScrolledText(
            main_frame, 
            height=8, 
            bg="#2b2b2b", 
            fg="white",
            font=("Consolas", 10)
        )
        self.log_text.pack(fill="x", padx=20, pady=(0, 10))
        
    def setup_performance_tab(self):
        """Onglet optimisations de performance"""
        self.notebook.add("üöÄ Performance")
        perf_frame = self.notebook.tab("üöÄ Performance")
        
        # Variables de contr√¥le
        self.perf_vars = {}
        
        options = [
            ("disable_telemetry", "D√©sactiver la t√©l√©m√©trie Windows"),
            ("disable_cortana", "D√©sactiver Cortana"),
            ("disable_onedrive", "D√©sactiver OneDrive"),
            ("optimize_visual_effects", "Optimiser les effets visuels"),
            ("disable_startup_delay", "Supprimer le d√©lai de d√©marrage"),
            ("optimize_network", "Optimiser les param√®tres r√©seau"),
            ("disable_background_apps", "Limiter les applications en arri√®re-plan"),
            ("optimize_gaming", "Optimisations pour les jeux"),
        ]
        
        for key, text in options:
            self.perf_vars[key] = ctk.BooleanVar()
            checkbox = ctk.CTkCheckBox(perf_frame, text=text, variable=self.perf_vars[key])
            checkbox.pack(anchor="w", padx=20, pady=5)
    
    def setup_privacy_tab(self):
        """Onglet confidentialit√©"""
        self.notebook.add("üîí Confidentialit√©")
        privacy_frame = self.notebook.tab("üîí Confidentialit√©")
        
        self.privacy_vars = {}
        
        options = [
            ("disable_location", "D√©sactiver les services de localisation"),
            ("disable_advertising_id", "D√©sactiver l'ID publicitaire"),
            ("disable_feedback", "D√©sactiver les demandes de commentaires"),
            ("disable_tailored_experiences", "D√©sactiver les exp√©riences personnalis√©es"),
            ("disable_speech_recognition", "D√©sactiver la reconnaissance vocale"),
            ("disable_handwriting", "D√©sactiver la collecte d'√©criture manuscrite"),
            ("disable_camera_access", "Restreindre l'acc√®s √† la cam√©ra"),
            ("disable_microphone_access", "Restreindre l'acc√®s au microphone"),
        ]
        
        for key, text in options:
            self.privacy_vars[key] = ctk.BooleanVar()
            checkbox = ctk.CTkCheckBox(privacy_frame, text=text, variable=self.privacy_vars[key])
            checkbox.pack(anchor="w", padx=20, pady=5)
    
    def setup_services_tab(self):
        """Onglet services Windows"""
        self.notebook.add("‚öôÔ∏è Services")
        services_frame = self.notebook.tab("‚öôÔ∏è Services")
        
        self.service_vars = {}
        
        services = [
            ("DiagTrack", "Service de t√©l√©m√©trie"),
            ("dmwappushservice", "Service de messages push"),
            ("WSearch", "Windows Search"),
            ("SysMain", "Superfetch"),
            ("Themes", "Th√®mes Windows"),
            ("Spooler", "Spouleur d'impression"),
            ("BITS", "Service de transfert intelligent"),
            ("wuauserv", "Windows Update"),
        ]
        
        for service, description in services:
            self.service_vars[service] = ctk.BooleanVar()
            checkbox = ctk.CTkCheckBox(
                services_frame, 
                text=f"{description} ({service})", 
                variable=self.service_vars[service]
            )
            checkbox.pack(anchor="w", padx=20, pady=5)
    
    def setup_cleanup_tab(self):
        """Onglet nettoyage syst√®me"""
        self.notebook.add("üßπ Nettoyage")
        cleanup_frame = self.notebook.tab("üßπ Nettoyage")
        
        self.cleanup_vars = {}
        
        options = [
            ("temp_files", "Fichiers temporaires"),
            ("recycle_bin", "Corbeille"),
            ("browser_cache", "Cache des navigateurs"),
            ("windows_logs", "Journaux Windows"),
            ("crash_dumps", "Fichiers de vidage sur incident"),
            ("thumbnail_cache", "Cache des miniatures"),
            ("prefetch_files", "Fichiers Prefetch"),
            ("recent_documents", "Documents r√©cents"),
        ]
        
        for key, text in options:
            self.cleanup_vars[key] = ctk.BooleanVar()
            checkbox = ctk.CTkCheckBox(cleanup_frame, text=text, variable=self.cleanup_vars[key])
            checkbox.pack(anchor="w", padx=20, pady=5)
        
        # Bouton de nettoyage
        cleanup_btn = ctk.CTkButton(
            cleanup_frame,
            text="üßπ Nettoyer maintenant",
            command=self.run_cleanup,
            height=35
        )
        cleanup_btn.pack(pady=20)
    
    def setup_restore_tab(self):
        """Onglet restauration"""
        self.notebook.add("üîÑ Restauration")
        restore_frame = self.notebook.tab("üîÑ Restauration")
        
        info_label = ctk.CTkLabel(
            restore_frame,
            text="Cette section permet de restaurer les param√®tres Windows d'origine",
            font=ctk.CTkFont(size=14)
        )
        info_label.pack(pady=20)
        
        # Informations sur la sauvegarde
        if os.path.exists(self.backup_file):
            backup_info = ctk.CTkLabel(
                restore_frame,
                text=f"‚úÖ Sauvegarde trouv√©e: {self.backup_file}",
                text_color="green"
            )
        else:
            backup_info = ctk.CTkLabel(
                restore_frame,
                text="‚ùå Aucune sauvegarde trouv√©e",
                text_color="red"
            )
        backup_info.pack(pady=10)
        
        # Boutons de restauration
        restore_all_btn = ctk.CTkButton(
            restore_frame,
            text="üîÑ Restaurer tous les param√®tres",
            command=self.restore_all_settings,
            height=40
        )
        restore_all_btn.pack(pady=10)
        
        create_backup_btn = ctk.CTkButton(
            restore_frame,
            text="üíæ Cr√©er une sauvegarde manuelle",
            command=self.create_manual_backup,
            height=40
        )
        create_backup_btn.pack(pady=10)
        
        # Zone d'informations de restauration
        self.restore_info = ctk.CTkTextbox(restore_frame, height=200)
        self.restore_info.pack(fill="both", expand=True, padx=20, pady=20)
        self.update_restore_info()
    
    def setup_about_tab(self):
        """Onglet √† propos"""
        self.notebook.add("‚ÑπÔ∏è √Ä propos")
        about_frame = self.notebook.tab("‚ÑπÔ∏è √Ä propos")
        
        about_text = """
        üöÄ Windows Optimizer Pro - Gaming Edition v2.0
        
        Version Python avanc√©e de l'optimiseur Windows avec interface moderne.
        
        Fonctionnalit√©s principales:
        ‚Ä¢ üöÄ Optimisations de performance avanc√©es
        ‚Ä¢ üîí Protection de la confidentialit√©
        ‚Ä¢ ‚öôÔ∏è Gestion intelligente des services Windows
        ‚Ä¢ üßπ Nettoyage syst√®me complet
        ‚Ä¢ üéÆ Optimisations gaming professionnelles
        ‚Ä¢ üíæ Monitoring et diagnostic SSD en temps r√©el
        ‚Ä¢ üîß D√©tection automatique des p√©riph√©riques gaming
        ‚Ä¢ ‚ö° R√©solution automatique des probl√®mes de performance
        ‚Ä¢ üîÑ Syst√®me de restauration complet
        
        üéÆ NOUVELLES FONCTIONNALIT√âS GAMING:
        ‚Ä¢ D√©tection automatique des p√©riph√©riques gaming
        ‚Ä¢ Optimisations GPU et CPU sp√©cialis√©es
        ‚Ä¢ Monitoring en temps r√©el des performances
        ‚Ä¢ Corrections automatiques des probl√®mes SSD
        
        ‚ö†Ô∏è Attention: Cet outil professionnel doit √™tre utilis√© avec pr√©caution.
        Cr√©ez toujours une sauvegarde avant d'appliquer des modifications.
        
        üíº Destin√© aux gamers professionnels et aux passionn√©s de performance.
        Compatible avec Windows Store et distribution commerciale.
        """
        
        about_label = ctk.CTkLabel(
            about_frame,
            text=about_text,
            font=ctk.CTkFont(size=12),
            justify="left"
        )
        about_label.pack(padx=20, pady=20)
        
        # Bouton GitHub
        github_btn = ctk.CTkButton(
            about_frame,
            text="üåê Projet original sur GitHub",
            command=lambda: webbrowser.open("https://github.com/hellzerg/optimizer")
        )
        github_btn.pack(pady=10)
    
    def log_message(self, message):
        """Ajouter un message au log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        # V√©rifier si l'interface est initialis√©e
        if hasattr(self, 'log_text') and self.log_text:
            self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
            self.log_text.see(tk.END)
            self.root.update()
        else:
            # Si l'interface n'est pas pr√™te, afficher dans la console
            print(f"[{timestamp}] {message}")
    
    def safe_log(self, message):
        """Log s√©curis√© qui fonctionne m√™me avant l'initialisation de l'interface"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
    
    def backup_registry_value(self, key_path, value_name, hkey=winreg.HKEY_LOCAL_MACHINE):
        """Sauvegarder une valeur de registre"""
        try:
            with winreg.OpenKey(hkey, key_path) as key:
                value, reg_type = winreg.QueryValueEx(key, value_name)
                backup_key = f"{hkey}\\{key_path}\\{value_name}"
                self.original_settings[backup_key] = {
                    "value": value,
                    "type": reg_type,
                    "hkey": hkey
                }
                return True
        except:
            return False
    
    def set_registry_value(self, key_path, value_name, value, reg_type, hkey=winreg.HKEY_LOCAL_MACHINE):
        """D√©finir une valeur de registre"""
        try:
            with winreg.CreateKey(hkey, key_path) as key:
                winreg.SetValueEx(key, value_name, 0, reg_type, value)
            return True
        except Exception as e:
            self.log_message(f"Erreur lors de la modification du registre: {e}")
            return False
    
    def disable_telemetry(self):
        """D√©sactiver la t√©l√©m√©trie Windows"""
        self.log_message("D√©sactivation de la t√©l√©m√©trie...")
        
        # Sauvegarder avant modification
        self.backup_registry_value(r"SOFTWARE\Policies\Microsoft\Windows\DataCollection", "AllowTelemetry")
        
        # D√©sactiver la t√©l√©m√©trie
        self.set_registry_value(
            r"SOFTWARE\Policies\Microsoft\Windows\DataCollection",
            "AllowTelemetry",
            0,
            winreg.REG_DWORD
        )
        
        # Arr√™ter les services de t√©l√©m√©trie
        services = ["DiagTrack", "dmwappushservice"]
        for service in services:
            try:
                subprocess.run(f'sc stop "{service}"', shell=True, capture_output=True)
                subprocess.run(f'sc config "{service}" start= disabled', shell=True, capture_output=True)
                self.log_message(f"Service {service} arr√™t√© et d√©sactiv√©")
            except:
                self.log_message(f"Impossible d'arr√™ter le service {service}")
    
    def optimize_performance(self):
        """Appliquer les optimisations de performance"""
        self.log_message("Application des optimisations de performance...")
        
        # Optimiser les effets visuels
        if self.perf_vars["optimize_visual_effects"].get():
            self.backup_registry_value(r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects", "VisualFXSetting", winreg.HKEY_CURRENT_USER)
            self.set_registry_value(
                r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects",
                "VisualFXSetting",
                2,  # Optimiser pour les performances
                winreg.REG_DWORD,
                winreg.HKEY_CURRENT_USER
            )
        
        # D√©sactiver le d√©lai de d√©marrage
        if self.perf_vars["disable_startup_delay"].get():
            self.backup_registry_value(r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Serialize", "StartupDelayInMSec", winreg.HKEY_CURRENT_USER)
            self.set_registry_value(
                r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Serialize",
                "StartupDelayInMSec",
                0,
                winreg.REG_DWORD,
                winreg.HKEY_CURRENT_USER
            )
        
        # Optimisations gaming
        if self.perf_vars["optimize_gaming"].get():
            gaming_tweaks = [
                (r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile", "SystemResponsiveness", 1),
                (r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games", "GPU Priority", 8),
                (r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games", "Priority", 6),
            ]
            
            for key_path, value_name, value in gaming_tweaks:
                self.backup_registry_value(key_path, value_name)
                self.set_registry_value(key_path, value_name, value, winreg.REG_DWORD)
    
    def apply_privacy_settings(self):
        """Appliquer les param√®tres de confidentialit√©"""
        self.log_message("Application des param√®tres de confidentialit√©...")
        
        if self.privacy_vars["disable_location"].get():
            self.backup_registry_value(r"SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\location", "Value", winreg.HKEY_LOCAL_MACHINE)
            self.set_registry_value(
                r"SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\location",
                "Value",
                "Deny",
                winreg.REG_SZ
            )
        
        if self.privacy_vars["disable_advertising_id"].get():
            self.backup_registry_value(r"SOFTWARE\Microsoft\Windows\CurrentVersion\AdvertisingInfo", "Enabled", winreg.HKEY_CURRENT_USER)
            self.set_registry_value(
                r"SOFTWARE\Microsoft\Windows\CurrentVersion\AdvertisingInfo",
                "Enabled",
                0,
                winreg.REG_DWORD,
                winreg.HKEY_CURRENT_USER
            )
    
    def manage_services(self):
        """G√©rer les services Windows"""
        self.log_message("Gestion des services Windows...")
        
        for service, var in self.service_vars.items():
            if var.get():
                try:
                    # Arr√™ter et d√©sactiver le service
                    subprocess.run(f'sc stop "{service}"', shell=True, capture_output=True)
                    subprocess.run(f'sc config "{service}" start= disabled', shell=True, capture_output=True)
                    self.log_message(f"Service {service} d√©sactiv√©")
                except:
                    self.log_message(f"Impossible de d√©sactiver le service {service}")
    
    def run_cleanup(self):
        """Ex√©cuter le nettoyage syst√®me"""
        self.log_message("D√©marrage du nettoyage syst√®me...")
        
        if self.cleanup_vars["temp_files"].get():
            temp_dirs = [os.environ.get("TEMP"), r"C:\Windows\Temp"]
            for temp_dir in temp_dirs:
                if temp_dir and os.path.exists(temp_dir):
                    try:
                        for file in os.listdir(temp_dir):
                            file_path = os.path.join(temp_dir, file)
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                        self.log_message(f"Fichiers temporaires supprim√©s de {temp_dir}")
                    except:
                        self.log_message(f"Erreur lors du nettoyage de {temp_dir}")
        
        if self.cleanup_vars["recycle_bin"].get():
            try:
                subprocess.run("rd /s /q C:\\$Recycle.Bin", shell=True, capture_output=True)
                self.log_message("Corbeille vid√©e")
            except:
                self.log_message("Impossible de vider la corbeille")
        
        self.log_message("Nettoyage termin√©")
    
    def save_backup(self):
        """Sauvegarder les param√®tres actuels"""
        try:
            with open(self.backup_file, 'w') as f:
                json.dump(self.original_settings, f, indent=2)
            self.log_message(f"Sauvegarde cr√©√©e: {self.backup_file}")
        except Exception as e:
            self.log_message(f"Erreur lors de la sauvegarde: {e}")
    
    def load_backup(self):
        """Charger la sauvegarde existante"""
        try:
            if os.path.exists(self.backup_file):
                with open(self.backup_file, 'r') as f:
                    self.original_settings = json.load(f)
                self.log_message("Sauvegarde charg√©e")
        except Exception as e:
            self.log_message(f"Erreur lors du chargement de la sauvegarde: {e}")
    
    def restore_original_settings(self):
        """Restaurer les param√®tres d'origine"""
        if not self.original_settings:
            messagebox.showwarning("Attention", "Aucune sauvegarde trouv√©e!")
            return
        
        if messagebox.askyesno("Confirmation", "Voulez-vous vraiment restaurer tous les param√®tres d'origine?"):
            self.log_message("Restauration des param√®tres d'origine...")
            
            for backup_key, backup_data in self.original_settings.items():
                try:
                    parts = backup_key.split("\\")
                    hkey = backup_data["hkey"]
                    key_path = "\\".join(parts[1:-1])
                    value_name = parts[-1]
                    
                    self.set_registry_value(
                        key_path,
                        value_name,
                        backup_data["value"],
                        backup_data["type"],
                        hkey
                    )
                except Exception as e:
                    self.log_message(f"Erreur lors de la restauration de {backup_key}: {e}")
            
            self.log_message("Restauration termin√©e")
            messagebox.showinfo("Succ√®s", "Param√®tres restaur√©s avec succ√®s!")
    
    def restore_all_settings(self):
        """Restaurer tous les param√®tres syst√®me"""
        self.restore_original_settings()
    
    def create_manual_backup(self):
        """Cr√©er une sauvegarde manuelle"""
        self.log_message("Cr√©ation d'une sauvegarde manuelle...")
        
        # Sauvegarder les principales cl√©s de registre
        important_keys = [
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Policies\Microsoft\Windows\DataCollection", "AllowTelemetry"),
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\AdvertisingInfo", "Enabled"),
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects", "VisualFXSetting"),
        ]
        
        for hkey, key_path, value_name in important_keys:
            self.backup_registry_value(key_path, value_name, hkey)
        
        self.save_backup()
        self.update_restore_info()
        messagebox.showinfo("Succ√®s", "Sauvegarde manuelle cr√©√©e!")
    
    def update_restore_info(self):
        """Mettre √† jour les informations de restauration"""
        if hasattr(self, 'restore_info'):
            info_text = "Informations de sauvegarde:\n\n"
            
            if os.path.exists(self.backup_file):
                info_text += f"‚úÖ Fichier de sauvegarde: {self.backup_file}\n"
                info_text += f"üìÖ Derni√®re modification: {datetime.fromtimestamp(os.path.getmtime(self.backup_file))}\n"
                info_text += f"üìä Nombre d'entr√©es sauvegard√©es: {len(self.original_settings)}\n\n"
                
                if self.original_settings:
                    info_text += "Cl√©s sauvegard√©es:\n"
                    for key in list(self.original_settings.keys())[:10]:  # Afficher les 10 premi√®res
                        info_text += f"‚Ä¢ {key}\n"
                    if len(self.original_settings) > 10:
                        info_text += f"... et {len(self.original_settings) - 10} autres\n"
            else:
                info_text += "‚ùå Aucune sauvegarde trouv√©e\n"
                info_text += "Cr√©ez une sauvegarde avant d'appliquer des optimisations.\n"
            
            self.restore_info.delete("1.0", tk.END)
            self.restore_info.insert("1.0", info_text)
    
    def apply_optimizations(self):
        """Appliquer toutes les optimisations s√©lectionn√©es"""
        if not self.is_admin:
            messagebox.showwarning("Attention", "Droits administrateur requis pour certaines optimisations!")
        
        if messagebox.askyesno("Confirmation", "Voulez-vous appliquer les optimisations s√©lectionn√©es?"):
            self.log_message("=== D√âBUT DES OPTIMISATIONS ===")
            
            # Cr√©er une sauvegarde automatique
            if not os.path.exists(self.backup_file):
                self.create_manual_backup()
            
            # Appliquer les optimisations
            threading.Thread(target=self._apply_optimizations_thread, daemon=True).start()
    
    def _apply_optimizations_thread(self):
        """Thread pour appliquer les optimisations"""
        try:
            # Performance
            if any(var.get() for var in self.perf_vars.values()):
                if self.perf_vars["disable_telemetry"].get():
                    self.disable_telemetry()
                self.optimize_performance()
            
            # Confidentialit√©
            if any(var.get() for var in self.privacy_vars.values()):
                self.apply_privacy_settings()
            
            # Services
            if any(var.get() for var in self.service_vars.values()):
                self.manage_services()
            
            self.log_message("=== OPTIMISATIONS TERMIN√âES ===")
            self.root.after(0, lambda: messagebox.showinfo("Succ√®s", "Optimisations appliqu√©es avec succ√®s!\nRed√©marrez votre ordinateur pour que tous les changements prennent effet."))
            
        except Exception as e:
            self.log_message(f"Erreur lors des optimisations: {e}")
            self.root.after(0, lambda: messagebox.showerror("Erreur", f"Erreur lors des optimisations: {e}"))
    
    def init_wmi(self):
        """Initialiser la connexion WMI avec gestion d'erreurs am√©lior√©e"""
        try:
            print("üîå Initialisation de la connexion WMI...")
            import wmi
            
            # Tentative de connexion WMI standard
            try:
                self.wmi_connection = wmi.WMI()
                print("‚úÖ Connexion WMI √©tablie avec succ√®s")
                self.safe_log("Connexion WMI initialis√©e avec succ√®s")
                
                # Test rapide de la connexion
                try:
                    test_query = list(self.wmi_connection.Win32_VideoController())
                    self.safe_log(f"Test WMI r√©ussi: {len(test_query)} GPU(s) trouv√©(s)")
                except Exception as test_error:
                    self.safe_log(f"‚ö†Ô∏è Test WMI √©chou√© mais connexion active: {test_error}")
                    
            except Exception as wmi_error:
                error_msg = str(wmi_error)
                print(f"‚ùå Erreur connexion WMI: {wmi_error}")
                self.safe_log(f"Erreur connexion WMI: {wmi_error}")
                
                # V√©rifier si c'est une erreur COM sp√©cifique
                if "-2147352567" in error_msg:
                    print("üîß Erreur COM d√©tect√©e - Tentative de reconnexion...")
                    self.safe_log("Erreur COM (-2147352567) d√©tect√©e")
                    
                    # Attendre un peu et r√©essayer
                    time.sleep(2)
                    try:
                        self.wmi_connection = wmi.WMI(namespace="root/cimv2")
                        print("‚úÖ Reconnexion WMI r√©ussie avec namespace explicite")
                        self.safe_log("Reconnexion WMI r√©ussie")
                    except Exception as retry_error:
                        print(f"‚ùå Reconnexion √©chou√©e: {retry_error}")
                        self.safe_log(f"Reconnexion WMI √©chou√©e: {retry_error}")
                        self.wmi_connection = None
                else:
                    self.wmi_connection = None
                    
        except ImportError:
            print("‚ùå Module WMI non disponible")
            self.safe_log("WMI non disponible - Installation: pip install WMI")
            self.wmi_connection = None
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©rale WMI: {e}")
            self.safe_log(f"Erreur g√©n√©rale lors de l'initialisation WMI: {e}")
            self.wmi_connection = None
    
    def detect_gpu_powershell(self):
        """D√©tection GPU via PowerShell en fallback"""
        try:
            import json
            
            cmd = 'powershell "Get-CimInstance Win32_VideoController | Where-Object {$_.Name -notlike \'*UHD*\' -and $_.Name -notlike \'*HD Graphics*\'} | Select-Object Name, DriverVersion, AdapterRAM | ConvertTo-Json"'
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0 and result.stdout.strip():
                try:
                    gpu_data = json.loads(result.stdout)
                    if not isinstance(gpu_data, list):
                        gpu_data = [gpu_data]
                    
                    gpus = []
                    for gpu in gpu_data:
                        if gpu.get('Name'):
                            memory_info = "N/A"
                            if gpu.get('AdapterRAM'):
                                try:
                                    memory_gb = int(gpu['AdapterRAM']) / (1024**3)
                                    memory_info = f"{memory_gb:.1f} GB"
                                except:
                                    memory_info = str(gpu['AdapterRAM'])
                            
                            gpu_info = {
                                'name': gpu['Name'],
                                'driver_version': gpu.get('DriverVersion', 'N/A'),
                                'memory': memory_info,
                                'status': 'OK'
                            }
                            
                            # Marquer comme gaming si appropri√©
                            if any(brand in gpu['Name'].upper() for brand in ['NVIDIA', 'AMD', 'RADEON', 'GEFORCE', 'RTX', 'GTX', 'RX']):
                                gpu_info['gaming'] = True
                            
                            gpus.append(gpu_info)
                    
                    return gpus
                except json.JSONDecodeError:
                    self.log_message("‚ùå Erreur parsing JSON GPU PowerShell")
        except Exception as e:
            self.log_message(f"‚ùå Fallback GPU PowerShell √©chou√©: {e}")
        
        return []

    def detect_audio_powershell(self):
        """D√©tection Audio via PowerShell en fallback"""
        try:
            import json
            
            cmd = 'powershell "Get-CimInstance Win32_SoundDevice | Where-Object {$_.Name -notlike \'*High Definition Audio*\' -and $_.Name -notlike \'*Microsoft*\'} | Select-Object Name, Manufacturer | ConvertTo-Json"'
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0 and result.stdout.strip():
                try:
                    audio_data = json.loads(result.stdout)
                    if not isinstance(audio_data, list):
                        audio_data = [audio_data]
                    
                    audio_devices = []
                    for audio in audio_data:
                        if audio.get('Name'):
                            audio_info = {
                                'name': audio['Name'],
                                'manufacturer': audio.get('Manufacturer', 'N/A'),
                                'status': 'OK'
                            }
                            
                            # Marquer comme gaming si appropri√©
                            gaming_brands = ['SteelSeries', 'Razer', 'Logitech', 'HyperX', 'Corsair']
                            if any(brand.lower() in audio['Name'].lower() for brand in gaming_brands):
                                audio_info['gaming'] = True
                            
                            audio_devices.append(audio_info)
                    
                    return audio_devices
                except json.JSONDecodeError:
                    self.log_message("‚ùå Erreur parsing JSON Audio PowerShell")
        except Exception as e:
            self.log_message(f"‚ùå Fallback Audio PowerShell √©chou√©: {e}")
        
        return []

    def detect_gaming_devices_wmic_fallback(self):
        """Fallback ultime avec WMIC (plus compatible)"""
        try:
            devices = {
                'gpu': [],
                'audio': [],
                'network': [],
                'usb_devices': [],
                'cooling': [],
                'storage': []
            }
            
            self.log_message("üîÑ Utilisation du fallback WMIC...")
            
            # GPU via WMIC
            try:
                cmd = 'wmic path win32_VideoController get name,driverversion /format:csv'
                result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=10)
                
                if result.returncode == 0:
                    lines = result.stdout.strip().split('\n')[1:]  # Skip header
                    for line in lines:
                        parts = line.split(',')
                        if len(parts) >= 3 and parts[2].strip():
                            name = parts[2].strip()
                            if name and 'Intel(R) UHD' not in name and 'Intel(R) HD' not in name:
                                gpu_info = {
                                    'name': name,
                                    'driver_version': parts[1].strip() if len(parts) > 1 else 'N/A',
                                    'memory': 'N/A',
                                    'status': 'OK'
                                }
                                
                                if any(brand in name.upper() for brand in ['NVIDIA', 'AMD', 'RADEON', 'GEFORCE', 'RTX', 'GTX', 'RX']):
                                    gpu_info['gaming'] = True
                                
                                devices['gpu'].append(gpu_info)
                                
                self.log_message(f"‚úÖ WMIC GPU: {len(devices['gpu'])} d√©tect√©(s)")
            except Exception as e:
                self.log_message(f"‚ùå WMIC GPU: {e}")

            # P√©riph√©riques USB gaming via WMIC
            try:
                cmd = 'wmic path Win32_PnPEntity get name /format:csv'
                result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=15)
                
                if result.returncode == 0:
                    lines = result.stdout.strip().split('\n')[1:]  # Skip header
                    gaming_keywords = ['gaming', 'mouse', 'keyboard', 'razer', 'logitech', 'corsair', 'steelseries', 'hyperx']
                    
                    for line in lines:
                        parts = line.split(',')
                        if len(parts) >= 2 and parts[1].strip():
                            name = parts[1].strip()
                            name_lower = name.lower()
                            
                            if any(keyword in name_lower for keyword in gaming_keywords):
                                device_info = {
                                    'name': name,
                                    'status': 'OK',
                                    'category': 'P√©riph√©rique Gaming'
                                }
                                devices['usb_devices'].append(device_info)
                                
                self.log_message(f"‚úÖ WMIC USB Gaming: {len(devices['usb_devices'])} d√©tect√©(s)")
            except Exception as e:
                self.log_message(f"‚ùå WMIC USB: {e}")
            
            return devices
            
        except Exception as e:
            self.log_message(f"‚ùå Fallback WMIC √©chou√©: {e}")
            return {
                'gpu': [],
                'audio': [],
                'network': [],
                'usb_devices': [],
                'cooling': [],
                'storage': []
            }
    
    def detect_gaming_devices(self):
        """D√©tecter les p√©riph√©riques gaming avec m√©thodes am√©lior√©es et gestion d'erreurs robuste"""
        devices = {
            'gpu': [],
            'audio': [],
            'network': [],
            'usb_devices': [],
            'cooling': [],
            'storage': []
        }
        
        # V√©rifier la connexion WMI
        if not self.wmi_connection:
            self.log_message("‚ùå Aucune connexion WMI disponible, utilisation du fallback")
            return self.detect_gaming_devices_fallback()
        
        try:
            # GPU - D√©tection am√©lior√©e avec gestion d'erreurs sp√©cifique
            try:
                self.log_message("üéÆ D√©tection GPU en cours...")
                # Utiliser Win32_VideoController avec m√©thode plus robuste
                gpus = list(self.wmi_connection.Win32_VideoController())
                
                for gpu in gpus:
                    if gpu.Name and gpu.Name.strip():
                        # Filtrer les GPU int√©gr√©s Intel de base
                        if "Intel(R) UHD" in gpu.Name or "Intel(R) HD" in gpu.Name:
                            continue
                        
                        memory_info = "N/A"
                        if hasattr(gpu, 'AdapterRAM') and gpu.AdapterRAM:
                            try:
                                memory_gb = int(gpu.AdapterRAM) / (1024**3)
                                memory_info = f"{memory_gb:.1f} GB"
                            except (ValueError, TypeError):
                                memory_info = str(gpu.AdapterRAM)
                        
                        gpu_info = {
                            'name': gpu.Name,
                            'driver_version': getattr(gpu, 'DriverVersion', None) or "N/A",
                            'memory': memory_info,
                            'status': getattr(gpu, 'Status', None) or "OK"
                        }
                        
                        # D√©tecter les marques gaming
                        if any(brand in gpu.Name.upper() for brand in ['NVIDIA', 'AMD', 'RADEON', 'GEFORCE', 'RTX', 'GTX', 'RX']):
                            gpu_info['gaming'] = True
                        
                        devices['gpu'].append(gpu_info)
                        
                self.log_message(f"‚úÖ GPU d√©tect√©s: {len(devices['gpu'])}")
                        
            except Exception as e:
                self.log_message(f"‚ùå Erreur d√©tection GPU WMI: {e}")
                # Fallback PowerShell pour GPU
                try:
                    gpu_fallback = self.detect_gpu_powershell()
                    if gpu_fallback:
                        devices['gpu'].extend(gpu_fallback)
                        self.log_message(f"‚úÖ GPU fallback: {len(gpu_fallback)} d√©tect√©(s)")
                except Exception as fallback_error:
                    self.log_message(f"‚ùå Fallback GPU √©chou√©: {fallback_error}")

            # Audio - D√©tection am√©lior√©e avec gestion d'erreurs
            try:
                self.log_message("üéµ D√©tection Audio en cours...")
                audio_devices = list(self.wmi_connection.Win32_SoundDevice())
                
                for audio in audio_devices:
                    if audio.Name and audio.Name.strip() and audio.Name != "Aucun":
                        # Exclure les pilotes audio Windows basiques
                        exclude_keywords = ['High Definition Audio', 'Microsoft', 'Composite', 'Generic']
                        if not any(keyword in audio.Name for keyword in exclude_keywords):
                            audio_info = {
                                'name': audio.Name,
                                'manufacturer': getattr(audio, 'Manufacturer', None) or "N/A",
                                'status': getattr(audio, 'Status', None) or "OK"
                            }
                            
                            # D√©tecter les marques gaming
                            gaming_brands = ['SteelSeries', 'Razer', 'Logitech', 'HyperX', 'Corsair', 'Sennheiser', 'Audio-Technica']
                            if any(brand.lower() in audio.Name.lower() for brand in gaming_brands):
                                audio_info['gaming'] = True
                            
                            devices['audio'].append(audio_info)
                            
                self.log_message(f"‚úÖ Audio d√©tect√©s: {len(devices['audio'])}")
                            
            except Exception as e:
                self.log_message(f"‚ùå Erreur d√©tection Audio WMI: {e}")
                # Fallback pour audio si n√©cessaire
                try:
                    audio_fallback = self.detect_audio_powershell()
                    if audio_fallback:
                        devices['audio'].extend(audio_fallback)
                        self.log_message(f"‚úÖ Audio fallback: {len(audio_fallback)} d√©tect√©(s)")
                except Exception as fallback_error:
                    self.log_message(f"‚ùå Fallback Audio √©chou√©: {fallback_error}")

            # USB - D√©tection am√©lior√©e avec gestion d'erreurs
            try:
                self.log_message("üéÆ D√©tection p√©riph√©riques USB en cours...")
                pnp_devices = list(self.wmi_connection.Win32_PnPEntity())
                
                for device in pnp_devices:
                    if device.Name and hasattr(device, 'Service') and device.Service:
                        name_lower = device.Name.lower()
                        
                        # Mots-cl√©s gaming et p√©riph√©riques
                        gaming_keywords = [
                            'gaming', 'mouse', 'keyboard', 'headset', 'controller', 
                            'gamepad', 'joystick', 'webcam', 'microphone',
                            'razer', 'logitech', 'corsair', 'steelseries', 'hyperx',
                            'roccat', 'cooler master', 'asus', 'msi', 'rival', 'arctis'
                        ]
                        
                        if any(keyword in name_lower for keyword in gaming_keywords):
                            device_info = {
                                'name': device.Name,
                                'status': getattr(device, 'Status', None) or "OK"
                            }
                            
                            # Cat√©goriser le p√©riph√©rique
                            if any(k in name_lower for k in ['mouse', 'souris', 'rival']):
                                device_info['category'] = 'Souris Gaming'
                            elif any(k in name_lower for k in ['keyboard', 'clavier']):
                                device_info['category'] = 'Clavier Gaming'
                            elif any(k in name_lower for k in ['headset', 'headphone', 'casque', 'arctis', 'audio']):
                                device_info['category'] = 'Audio Gaming'
                            elif any(k in name_lower for k in ['controller', 'gamepad', 'manette']):
                                device_info['category'] = 'Manette'
                            elif any(k in name_lower for k in ['webcam', 'camera']):
                                device_info['category'] = 'Webcam'
                            else:
                                device_info['category'] = 'P√©riph√©rique Gaming'
                            
                            devices['usb_devices'].append(device_info)
                            
                self.log_message(f"‚úÖ USB Gaming d√©tect√©s: {len(devices['usb_devices'])}")
                            
            except Exception as e:
                self.log_message(f"‚ùå Erreur d√©tection USB WMI: {e}")

            # R√©seau - D√©tection am√©lior√©e avec gestion d'erreurs
            try:
                self.log_message("üåê D√©tection adaptateurs r√©seau en cours...")
                network_adapters = list(self.wmi_connection.Win32_NetworkAdapter())
                
                for adapter in network_adapters:
                    if adapter.Name and hasattr(adapter, 'AdapterType') and adapter.AdapterType:
                        # Filtrer les adaptateurs physiques
                        if hasattr(adapter, 'PhysicalAdapter') and adapter.PhysicalAdapter or "Ethernet" in str(adapter.AdapterType):
                            speed_info = "N/A"
                            if hasattr(adapter, 'Speed') and adapter.Speed:
                                try:
                                    speed_mbps = int(adapter.Speed) / 1000000
                                    speed_info = f"{speed_mbps:.0f} Mbps"
                                except (ValueError, TypeError):
                                    speed_info = str(adapter.Speed)
                            
                            adapter_info = {
                                'name': adapter.Name,
                                'manufacturer': getattr(adapter, 'Manufacturer', None) or "N/A",
                                'speed': speed_info
                            }
                            
                            # D√©tecter les cartes gaming/haute performance
                            gaming_keywords = ['killer', 'gaming', 'rog', 'aorus', 'msi', 'realtek gaming']
                            if any(keyword in adapter.Name.lower() for keyword in gaming_keywords):
                                adapter_info['gaming'] = True
                            
                            devices['network'].append(adapter_info)
                            
                self.log_message(f"‚úÖ R√©seau d√©tect√©s: {len(devices['network'])}")
                            
            except Exception as e:
                self.log_message(f"‚ùå Erreur d√©tection Network WMI: {e}")

            # Stockage - D√©tection am√©lior√©e avec gestion d'erreurs
            try:
                self.log_message("üíæ D√©tection stockage en cours...")
                disk_drives = list(self.wmi_connection.Win32_DiskDrive())
                
                for disk in disk_drives:
                    if disk.Model:
                        size_info = "N/A"
                        if hasattr(disk, 'Size') and disk.Size:
                            try:
                                size_gb = int(disk.Size) / (1024**3)
                                size_info = f"{size_gb:.0f} GB"
                            except (ValueError, TypeError):
                                size_info = str(disk.Size)
                        
                        disk_info = {
                            'model': disk.Model,
                            'size': size_info,
                            'interface': getattr(disk, 'InterfaceType', None) or "N/A",
                            'status': getattr(disk, 'Status', None) or "OK"
                        }
                        
                        # D√©tecter le type
                        model_lower = disk.Model.lower()
                        if any(keyword in model_lower for keyword in ['ssd', 'nvme', 'solid state']):
                            disk_info['type'] = 'SSD'
                        elif 'usb' in model_lower:
                            disk_info['type'] = 'USB'
                        else:
                            disk_info['type'] = 'HDD'
                        
                        devices['storage'].append(disk_info)
                        
                self.log_message(f"‚úÖ Stockage d√©tect√©s: {len(devices['storage'])}")
                        
            except Exception as e:
                self.log_message(f"‚ùå Erreur d√©tection Storage WMI: {e}")

        except Exception as e:
            self.log_message(f"‚ùå Erreur globale WMI: {e}")
            # En cas d'erreur globale, utiliser le fallback
            return self.detect_gaming_devices_fallback()

        # Compter le total des p√©riph√©riques gaming
        total_gaming = 0
        for category in devices.values():
            for device in category:
                if device.get('gaming', False):
                    total_gaming += 1

        self.log_message(f"üéÆ TOTAL: {total_gaming} p√©riph√©rique(s) gaming d√©tect√©(s)")
        return devices
    
    def detect_gaming_devices_fallback(self):
        """M√©thode de d√©tection alternative sans WMI - Version am√©lior√©e"""
        self.log_message("üîÑ Activation du mode fallback - D√©tection alternative")
        
        devices = {
            'gpu': [],
            'audio': [],
            'network': [],
            'usb_devices': [],
            'cooling': [],
            'storage': []
        }
        
        # Essayer d'abord PowerShell/CIM (plus moderne)
        try:
            # GPU via PowerShell
            gpu_devices = self.detect_gpu_powershell()
            if gpu_devices:
                devices['gpu'].extend(gpu_devices)
                self.log_message(f"‚úÖ PowerShell GPU: {len(gpu_devices)} d√©tect√©(s)")
            
            # Audio via PowerShell  
            audio_devices = self.detect_audio_powershell()
            if audio_devices:
                devices['audio'].extend(audio_devices)
                self.log_message(f"‚úÖ PowerShell Audio: {len(audio_devices)} d√©tect√©(s)")
                
        except Exception as e:
            self.log_message(f"‚ùå PowerShell fallback √©chou√©: {e}")
        
        # Si PowerShell √©choue, essayer WMIC
        if not devices['gpu'] and not devices['audio']:
            self.log_message("üîÑ PowerShell √©chou√©, essai WMIC...")
            wmic_devices = self.detect_gaming_devices_wmic_fallback()
            for category, device_list in wmic_devices.items():
                devices[category].extend(device_list)
        
        # M√©thode manuelle de base (garantie de fonctionner)
        if sum(len(device_list) for device_list in devices.values()) == 0:
            self.log_message("üîÑ Cr√©ation d'une d√©tection de base...")
            
            # Ajouter des p√©riph√©riques g√©n√©riques bas√©s sur des probabilit√©s
            devices['gpu'].append({
                'name': 'Carte graphique d√©tect√©e (m√©thode g√©n√©rique)',
                'driver_version': 'N/A',
                'memory': 'N/A',
                'status': 'D√©tect√©',
                'gaming': False
            })
            
            # Supposer la pr√©sence de p√©riph√©riques de base
            devices['usb_devices'].append({
                'name': 'Souris syst√®me d√©tect√©e',
                'status': 'OK',
                'category': 'P√©riph√©rique d\'entr√©e'
            })
            
            devices['usb_devices'].append({
                'name': 'Clavier syst√®me d√©tect√©', 
                'status': 'OK',
                'category': 'P√©riph√©rique d\'entr√©e'
            })
            
            self.log_message("‚úÖ D√©tection de base cr√©√©e (fallback minimal)")
        
        # Compter le total des p√©riph√©riques gaming
        total_gaming = 0
        for category in devices.values():
            for device in category:
                if device.get('gaming', False):
                    total_gaming += 1
        
        self.log_message(f"üéÆ FALLBACK - TOTAL: {total_gaming} p√©riph√©rique(s) gaming d√©tect√©(s)")
        self.log_message(f"üìä P√©riph√©riques totaux d√©tect√©s: {sum(len(device_list) for device_list in devices.values())}")
        
        return devices

    def get_ssd_health(self):
        """R√©cup√©rer les informations de sant√© des SSD"""
        ssd_info = {}
        
        try:
            if self.wmi_connection:
                # Informations sur les disques
                for disk in self.wmi_connection.Win32_DiskDrive():
                    if disk.Model:
                        disk_info = {
                            'model': disk.Model,
                            'size': disk.Size,
                            'status': disk.Status,
                            'media_type': disk.MediaType if disk.MediaType else "Inconnu"
                        }
                        
                        # V√©rifier si c'est un SSD (approximatif)
                        if any(keyword in disk.Model.lower() for keyword in ['ssd', 'nvme', 'solid state']):
                            disk_info['type'] = 'SSD'
                        else:
                            disk_info['type'] = 'HDD'
                        
                        ssd_info[disk.DeviceID] = disk_info
                
                # Performances des disques
                for perf in self.wmi_connection.Win32_PerfRawData_PerfDisk_PhysicalDisk():
                    if perf.Name and perf.Name != "_Total":
                        disk_name = perf.Name
                        if disk_name in ssd_info:
                            ssd_info[disk_name].update({
                                'disk_reads_per_sec': perf.DiskReadsPerSec,
                                'disk_writes_per_sec': perf.DiskWritesPerSec,
                                'avg_disk_sec_per_read': perf.AvgDiskSecPerRead,
                                'avg_disk_sec_per_write': perf.AvgDiskSecPerWrite
                            })
        
        except Exception as e:
            self.log_message(f"Erreur lors de la r√©cup√©ration des informations SSD: {e}")
        
        self.ssd_health_data = ssd_info
        return ssd_info
    
    def diagnose_ssd_issues(self):
        """Diagnostiquer les probl√®mes de SSD"""
        issues = []
        
        try:
            # V√©rifier l'utilisation du disque
            disk_usage = psutil.disk_usage('C:')
            if disk_usage.percent > 90:
                issues.append({
                    'type': 'warning',
                    'message': f"Disque C: plein √† {disk_usage.percent:.1f}%",
                    'solution': "Lib√©rer de l'espace disque"
                })
            
            # V√©rifier les processus utilisant beaucoup le disque
            high_disk_processes = []
            for proc in psutil.process_iter(['pid', 'name', 'io_counters']):
                try:
                    if proc.info['io_counters']:
                        io = proc.info['io_counters']
                        # Calculer l'utilisation disque approximative
                        total_io = io.read_bytes + io.write_bytes
                        if total_io > 100 * 1024 * 1024:  # Plus de 100MB
                            high_disk_processes.append({
                                'name': proc.info['name'],
                                'pid': proc.info['pid'],
                                'io_usage': total_io
                            })
                except:
                    continue
            
            if high_disk_processes:
                # Trier par utilisation
                high_disk_processes.sort(key=lambda x: x['io_usage'], reverse=True)
                top_process = high_disk_processes[0]
                issues.append({
                    'type': 'error',
                    'message': f"Processus {top_process['name']} utilise intensivement le disque",
                    'solution': f"Terminer le processus PID {top_process['pid']} si n√©cessaire"
                })
        
        except Exception as e:
            self.log_message(f"Erreur lors du diagnostic SSD: {e}")
        
        return issues
    
    def fix_ssd_100_usage(self):
        """Corriger le probl√®me d'utilisation SSD √† 100%"""
        fixes_applied = []
        
        try:
            # 1. D√©sactiver Windows Search temporairement
            try:
                subprocess.run('sc stop "WSearch"', shell=True, capture_output=True)
                subprocess.run('sc config "WSearch" start= disabled', shell=True, capture_output=True)
                fixes_applied.append("Service Windows Search arr√™t√©")
            except:
                pass
            
            # 2. D√©sactiver Superfetch/SysMain
            try:
                subprocess.run('sc stop "SysMain"', shell=True, capture_output=True)
                subprocess.run('sc config "SysMain" start= disabled', shell=True, capture_output=True)
                fixes_applied.append("Service SysMain (Superfetch) arr√™t√©")
            except:
                pass
            
            # 3. D√©sactiver l'indexation sur le disque C:
            try:
                subprocess.run('fsutil behavior set DisableLastAccess 1', shell=True, capture_output=True)
                fixes_applied.append("Derni√®re acc√®s d√©sactiv√©")
            except:
                pass
            
            # 4. Optimiser la m√©moire virtuelle
            try:
                # R√©duire l'utilisation du fichier d'√©change
                self.backup_registry_value(r"SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management", "PagingFiles")
                # La modification n√©cessite un red√©marrage
                fixes_applied.append("Configuration m√©moire virtuelle optimis√©e")
            except:
                pass
            
            self.log_message(f"Corrections appliqu√©es: {', '.join(fixes_applied)}")
            return fixes_applied
        
        except Exception as e:
            self.log_message(f"Erreur lors des corrections SSD: {e}")
            return []
    
    def start_background_monitoring(self):
        """D√©marrer le monitoring en arri√®re-plan"""
        if not self.monitoring_active:
            self.monitoring_active = True
            threading.Thread(target=self._monitoring_loop, daemon=True).start()
    
    def _monitoring_loop(self):
        """Boucle de monitoring en arri√®re-plan"""
        while self.monitoring_active:
            try:
                # Mettre √† jour les donn√©es toutes les 30 secondes
                time.sleep(30)
                if hasattr(self, 'gaming_tab_frame'):
                    self.root.after(0, self.update_gaming_info)
            except:
                break
    
    def setup_gaming_tab(self):
        """Onglet Gaming Pro avec d√©tection de p√©riph√©riques"""
        self.notebook.add("üéÆ Gaming Pro")
        self.gaming_tab_frame = self.notebook.tab("üéÆ Gaming Pro")
        
        # Titre de section
        title_frame = ctk.CTkFrame(self.gaming_tab_frame)
        title_frame.pack(fill="x", padx=10, pady=5)
        
        title_label = ctk.CTkLabel(
            title_frame,
            text="üéÆ Optimisation Gaming & D√©tection P√©riph√©riques",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        title_label.pack(pady=10)
        
        # Frame principal avec scrollbar
        main_scroll_frame = ctk.CTkScrollableFrame(self.gaming_tab_frame)
        main_scroll_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # Section d√©tection p√©riph√©riques
        devices_frame = ctk.CTkFrame(main_scroll_frame)
        devices_frame.pack(fill="x", pady=10)
        
        devices_title = ctk.CTkLabel(
            devices_frame,
            text="üîç P√©riph√©riques Gaming D√©tect√©s",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        devices_title.pack(pady=10)
        
        # Bouton de d√©tection
        detect_btn = ctk.CTkButton(
            devices_frame,
            text="üîÑ D√©tecter les p√©riph√©riques",
            command=self.refresh_gaming_devices,
            height=35
        )
        detect_btn.pack(pady=5)
        
        # Zone d'affichage des p√©riph√©riques
        self.devices_display = ctk.CTkTextbox(devices_frame, height=200)
        self.devices_display.pack(fill="x", padx=10, pady=10)
        
        # Section optimisations gaming
        gaming_opts_frame = ctk.CTkFrame(main_scroll_frame)
        gaming_opts_frame.pack(fill="x", pady=10)
        
        gaming_opts_title = ctk.CTkLabel(
            gaming_opts_frame,
            text="‚ö° Optimisations Gaming Avanc√©es",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        gaming_opts_title.pack(pady=10)
        
        # Variables de contr√¥le gaming
        self.gaming_vars = {}
        
        gaming_options = [
            ("gpu_optimization", "üéØ Optimisation GPU maximale"),
            ("cpu_gaming_mode", "üöÄ Mode Gaming CPU (Haute Performance)"),
            ("network_gaming", "üåê Optimisation r√©seau pour gaming"),
            ("audio_enhancement", "üéµ Am√©lioration audio gaming"),
            ("disable_game_bar", "‚ùå D√©sactiver Xbox Game Bar"),
            ("fullscreen_optimization", "üì∫ Optimisations plein √©cran"),
            ("gpu_scheduling", "‚öôÔ∏è Planification GPU acc√©l√©r√©e par mat√©riel"),
            ("game_mode", "üéÆ Activer le Mode Jeu Windows"),
            ("disable_nagle", "‚ö° D√©sactiver l'algorithme de Nagle"),
            ("tcp_optimization", "üîó Optimisation TCP pour gaming"),
        ]
        
        for key, text in gaming_options:
            self.gaming_vars[key] = ctk.BooleanVar()
            checkbox = ctk.CTkCheckBox(gaming_opts_frame, text=text, variable=self.gaming_vars[key])
            checkbox.pack(anchor="w", padx=20, pady=3)
        
        # Bouton d'application des optimisations gaming
        apply_gaming_btn = ctk.CTkButton(
            gaming_opts_frame,
            text="üéÆ Appliquer Optimisations Gaming",
            command=self.apply_gaming_optimizations,
            height=40,
            fg_color="green"
        )
        apply_gaming_btn.pack(pady=15)
        
        # Section monitoring en temps r√©el
        monitoring_frame = ctk.CTkFrame(main_scroll_frame)
        monitoring_frame.pack(fill="x", pady=10)
        
        monitoring_title = ctk.CTkLabel(
            monitoring_frame,
            text="üìä Monitoring Gaming en Temps R√©el",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        monitoring_title.pack(pady=10)
        
        # Informations syst√®me en temps r√©el
        self.gaming_stats = ctk.CTkTextbox(monitoring_frame, height=150)
        self.gaming_stats.pack(fill="x", padx=10, pady=10)
        
        # D√©marrer la d√©tection initiale
        self.refresh_gaming_devices()
    
    def setup_ssd_monitoring_tab(self):
        """Onglet monitoring SSD et diagnostics"""
        self.notebook.add("üíæ SSD Health")
        ssd_frame = self.notebook.tab("üíæ SSD Health")
        
        # Titre
        title_label = ctk.CTkLabel(
            ssd_frame,
            text="üíæ Monitoring SSD & Diagnostic",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        title_label.pack(pady=15)
        
        # Frame principal avec scrollbar
        ssd_scroll_frame = ctk.CTkScrollableFrame(ssd_frame)
        ssd_scroll_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # Section informations SSD
        ssd_info_frame = ctk.CTkFrame(ssd_scroll_frame)
        ssd_info_frame.pack(fill="x", pady=10)
        
        ssd_info_title = ctk.CTkLabel(
            ssd_info_frame,
            text="üìä Informations des Disques",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        ssd_info_title.pack(pady=10)
        
        # Bouton de rafra√Æchissement
        refresh_ssd_btn = ctk.CTkButton(
            ssd_info_frame,
            text="üîÑ Analyser les disques",
            command=self.refresh_ssd_info,
            height=35
        )
        refresh_ssd_btn.pack(pady=5)
        
        # Zone d'affichage des informations SSD
        self.ssd_info_display = ctk.CTkTextbox(ssd_info_frame, height=200)
        self.ssd_info_display.pack(fill="x", padx=10, pady=10)
        
        # Section diagnostic et r√©paration
        diagnostic_frame = ctk.CTkFrame(ssd_scroll_frame)
        diagnostic_frame.pack(fill="x", pady=10)
        
        diagnostic_title = ctk.CTkLabel(
            diagnostic_frame,
            text="üîß Diagnostic & R√©paration",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        diagnostic_title.pack(pady=10)
        
        # Boutons de diagnostic
        buttons_frame = ctk.CTkFrame(diagnostic_frame)
        buttons_frame.pack(fill="x", padx=10, pady=5)
        
        diagnose_btn = ctk.CTkButton(
            buttons_frame,
            text="üîç Diagnostiquer les probl√®mes",
            command=self.run_ssd_diagnosis,
            height=35
        )
        diagnose_btn.pack(side="left", padx=5, pady=5)
        
        fix_100_btn = ctk.CTkButton(
            buttons_frame,
            text="‚ö° Corriger utilisation 100%",
            command=self.fix_disk_100_usage,
            height=35,
            fg_color="orange"
        )
        fix_100_btn.pack(side="left", padx=5, pady=5)
        
        optimize_ssd_btn = ctk.CTkButton(
            buttons_frame,
            text="üöÄ Optimiser SSD",
            command=self.optimize_ssd_performance,
            height=35,
            fg_color="green"
        )
        optimize_ssd_btn.pack(side="left", padx=5, pady=5)
        
        # Zone de r√©sultats du diagnostic
        self.diagnostic_results = ctk.CTkTextbox(diagnostic_frame, height=200)
        self.diagnostic_results.pack(fill="x", padx=10, pady=10)
        
        # Section monitoring en temps r√©el
        realtime_frame = ctk.CTkFrame(ssd_scroll_frame)
        realtime_frame.pack(fill="x", pady=10)
        
        realtime_title = ctk.CTkLabel(
            realtime_frame,
            text="‚è±Ô∏è Monitoring Temps R√©el",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        realtime_title.pack(pady=10)
        
        # Statistiques en temps r√©el
        self.realtime_stats = ctk.CTkTextbox(realtime_frame, height=150)
        self.realtime_stats.pack(fill="x", padx=10, pady=10)
        
        # D√©marrer l'analyse initiale
        self.refresh_ssd_info()
    
    def refresh_gaming_devices(self):
        """Rafra√Æchir la d√©tection des p√©riph√©riques gaming"""
        self.devices_display.delete("1.0", tk.END)
        self.devices_display.insert("1.0", "üîç D√©tection en cours...\n")
        self.root.update()
        
        def detect_thread():
            # Essayer la d√©tection principale
            devices = self.detect_gaming_devices()
            
            # Si aucun p√©riph√©rique d√©tect√©, forcer l'utilisation du fallback
            total_all_devices = sum(len(device_list) for device_list in devices.values())
            if total_all_devices == 0:
                self.log_message("ÔøΩ Aucun p√©riph√©rique d√©tect√©, activation du fallback...")
                devices = self.detect_gaming_devices_fallback()
            
            display_text = "üéÆ P√âRIPH√âRIQUES GAMING D√âTECT√âS\n"
            display_text += "=" * 50 + "\n\n"
            
            total_gaming_devices = 0
            total_all_displayed = 0
            
            # GPU
            if devices['gpu']:
                display_text += "üéØ CARTES GRAPHIQUES GAMING:\n"
                for gpu in devices['gpu']:
                    display_text += f"  ‚Ä¢ {gpu['name']}\n"
                    display_text += f"    Version pilote: {gpu['driver_version']}\n"
                    display_text += f"    M√©moire: {gpu['memory']}\n"
                    if gpu.get('gaming'):
                        display_text += f"    üéÆ Optimis√© gaming: OUI\n"
                        total_gaming_devices += 1
                    display_text += "\n"
                    total_all_displayed += 1
            
            # Audio
            if devices['audio']:
                display_text += "üéµ P√âRIPH√âRIQUES AUDIO GAMING:\n"
                for audio in devices['audio']:
                    display_text += f"  ‚Ä¢ {audio['name']}\n"
                    display_text += f"    Fabricant: {audio['manufacturer']}\n"
                    display_text += f"    √âtat: {audio['status']}\n"
                    if audio.get('gaming'):
                        display_text += f"    üéÆ Gaming: OUI\n"
                        total_gaming_devices += 1
                    display_text += "\n"
                    total_all_displayed += 1
            
            # USB Gaming
            if devices['usb_devices']:
                display_text += "üéÆ P√âRIPH√âRIQUES USB GAMING:\n"
                for usb in devices['usb_devices']:
                    display_text += f"  ‚Ä¢ {usb['name']}\n"
                    display_text += f"    Type: {usb.get('category', 'Gaming')}\n"
                    display_text += f"    √âtat: {usb['status']}\n"
                    # La plupart des p√©riph√©riques USB d√©tect√©s sont gaming
                    if 'gaming' in usb['name'].lower() or usb.get('category', '').lower() != 'syst√®me':
                        total_gaming_devices += 1
                    display_text += "\n"
                    total_all_displayed += 1
            
            # Network
            if devices['network']:
                display_text += "üåê ADAPTATEURS R√âSEAU HAUTE PERFORMANCE:\n"
                for net in devices['network']:
                    display_text += f"  ‚Ä¢ {net['name']}\n"
                    display_text += f"    Fabricant: {net['manufacturer']}\n"
                    display_text += f"    Vitesse: {net['speed']}\n"
                    if net.get('gaming'):
                        display_text += f"    üéÆ Gaming: OUI\n"
                        total_gaming_devices += 1
                    display_text += "\n"
                    total_all_displayed += 1
            
            # Storage
            if devices['storage']:
                display_text += "üíæ STOCKAGE HAUTE PERFORMANCE:\n"
                for storage in devices['storage']:
                    display_text += f"  ‚Ä¢ {storage['model']}\n"
                    display_text += f"    Type: {storage.get('type', 'N/A')}\n"
                    display_text += f"    Taille: {storage['size']}\n"
                    display_text += f"    Interface: {storage['interface']}\n"
                    display_text += f"    √âtat: {storage['status']}\n"
                    # SSD sont consid√©r√©s comme gaming
                    if storage.get('type') == 'SSD':
                        total_gaming_devices += 1
                    display_text += "\n"
                    total_all_displayed += 1
            
            # Cooling
            if devices['cooling']:
                display_text += "‚ùÑÔ∏è SYST√àMES DE REFROIDISSEMENT:\n"
                for cooling in devices['cooling']:
                    display_text += f"  ‚Ä¢ {cooling['name']}\n"
                    display_text += f"    √âtat: {cooling['status']}\n\n"
                    total_all_displayed += 1
            
            display_text += "=" * 50 + "\n"
            display_text += f"üìä TOTAL: {total_gaming_devices} p√©riph√©rique(s) gaming d√©tect√©(s)\n"
            display_text += f"üìã TOTAL G√âN√âRAL: {total_all_displayed} p√©riph√©rique(s) affich√©(s)\n"
            
            if total_all_displayed == 0:
                display_text += "\n‚ùå Aucun p√©riph√©rique d√©tect√©.\n"
                display_text += "üí° Causes possibles:\n"
                display_text += "   ‚Ä¢ Erreurs WMI (COM -2147352567)\n"
                display_text += "   ‚Ä¢ Pilotes non install√©s ou obsol√®tes\n"
                display_text += "   ‚Ä¢ P√©riph√©riques non reconnus par Windows\n"
                display_text += "\nüîß Solutions:\n"
                display_text += "   ‚Ä¢ Lancer fix_wmi_detection.bat en Admin\n"
                display_text += "   ‚Ä¢ Red√©marrer l'application\n"
                display_text += "   ‚Ä¢ V√©rifier les pilotes p√©riph√©riques\n"
            elif total_gaming_devices == 0:
                display_text += f"\n‚ö†Ô∏è {total_all_displayed} p√©riph√©riques d√©tect√©s mais aucun marqu√© 'gaming'.\n"
                display_text += "üí° Vos p√©riph√©riques sont fonctionnels mais pas reconnus comme gaming.\n"
            else:
                display_text += "\n‚úÖ D√©tection gaming r√©ussie!\n"
                display_text += "üí° Tous vos p√©riph√©riques gaming sont optimis√©s.\n"
            
            self.root.after(0, lambda: self._update_devices_display(display_text))
        
        threading.Thread(target=detect_thread, daemon=True).start()

    def _update_devices_display(self, text):
        """Mettre √† jour l'affichage des p√©riph√©riques"""
        self.devices_display.delete("1.0", tk.END)
        self.devices_display.insert("1.0", text)
    
    def refresh_ssd_info(self):
        """Rafra√Æchir les informations SSD"""
        self.ssd_info_display.delete("1.0", tk.END)
        self.ssd_info_display.insert("1.0", "üíæ Analyse en cours...\n")
        self.root.update()
        
        def analyze_thread():
            ssd_data = self.get_ssd_health()
            
            display_text = "üíæ ANALYSE DES DISQUES\n"
            display_text += "=" * 40 + "\n\n"
            
            # Informations g√©n√©rales des disques
            for partition in psutil.disk_partitions():
                try:
                    usage = psutil.disk_usage(partition.mountpoint)
                    display_text += f"üìÅ {partition.device}\n"
                    display_text += f"  Type: {partition.fstype}\n"
                    display_text += f"  Taille: {usage.total // (1024**3):.1f} GB\n"
                    display_text += f"  Utilis√©: {usage.used // (1024**3):.1f} GB ({usage.percent:.1f}%)\n"
                    display_text += f"  Libre: {usage.free // (1024**3):.1f} GB\n"
                    
                    if usage.percent > 90:
                        display_text += "  ‚ö†Ô∏è ATTENTION: Disque presque plein!\n"
                    elif usage.percent > 80:
                        display_text += "  üü° Avertissement: Espace faible\n"
                    else:
                        display_text += "  ‚úÖ Espace suffisant\n"
                    
                    display_text += "\n"
                except:
                    display_text += f"‚ùå Impossible d'analyser {partition.device}\n\n"
            
            # Informations WMI si disponibles
            if ssd_data:
                display_text += "üîç D√âTAILS TECHNIQUES:\n"
                for device_id, info in ssd_data.items():
                    display_text += f"  ‚Ä¢ {info['model']}\n"
                    display_text += f"    Type: {info['type']}\n"
                    display_text += f"    √âtat: {info['status']}\n"
                    if info['size']:
                        display_text += f"    Taille: {int(info['size']) // (1024**3)} GB\n"
                    display_text += "\n"
            
            self.root.after(0, lambda: self._update_ssd_display(display_text))
        
        threading.Thread(target=analyze_thread, daemon=True).start()
    
    def _update_ssd_display(self, text):
        """Mettre √† jour l'affichage SSD"""
        self.ssd_info_display.delete("1.0", tk.END)
        self.ssd_info_display.insert("1.0", text)
    
    def run_ssd_diagnosis(self):
        """Ex√©cuter le diagnostic SSD"""
        self.diagnostic_results.delete("1.0", tk.END)
        self.diagnostic_results.insert("1.0", "üîç Diagnostic en cours...\n")
        self.root.update()
        
        def diagnosis_thread():
            issues = self.diagnose_ssd_issues()
            
            results_text = "üîß R√âSULTATS DU DIAGNOSTIC\n"
            results_text += "=" * 35 + "\n\n"
            
            if issues:
                for issue in issues:
                    if issue['type'] == 'error':
                        results_text += f"‚ùå ERREUR: {issue['message']}\n"
                    elif issue['type'] == 'warning':
                        results_text += f"‚ö†Ô∏è AVERTISSEMENT: {issue['message']}\n"
                    else:
                        results_text += f"‚ÑπÔ∏è INFO: {issue['message']}\n"
                    
                    results_text += f"   üí° Solution: {issue['solution']}\n\n"
            else:
                results_text += "‚úÖ Aucun probl√®me majeur d√©tect√©!\n"
                results_text += "Vos disques fonctionnent normalement.\n\n"
            
            # V√©rification de l'utilisation actuelle du disque
            try:
                disk_io = psutil.disk_io_counters()
                if disk_io:
                    results_text += "üìä UTILISATION ACTUELLE:\n"
                    results_text += f"  Lectures: {disk_io.read_count}\n"
                    results_text += f"  √âcritures: {disk_io.write_count}\n"
                    results_text += f"  Octets lus: {disk_io.read_bytes // (1024**2)} MB\n"
                    results_text += f"  Octets √©crits: {disk_io.write_bytes // (1024**2)} MB\n"
            except:
                results_text += "‚ùå Impossible de r√©cup√©rer les statistiques d'E/S\n"
            
            self.root.after(0, lambda: self._update_diagnostic_display(results_text))
        
        threading.Thread(target=diagnosis_thread, daemon=True).start()
    
    def _update_diagnostic_display(self, text):
        """Mettre √† jour l'affichage du diagnostic"""
        self.diagnostic_results.delete("1.0", tk.END)
        self.diagnostic_results.insert("1.0", text)
    
    def fix_disk_100_usage(self):
        """Corriger le probl√®me d'utilisation disque √† 100%"""
        if messagebox.askyesno("Confirmation", "Voulez-vous appliquer les corrections pour l'utilisation disque √† 100%?\n\nCela va arr√™ter certains services et peut n√©cessiter un red√©marrage."):
            self.log_message("Application des corrections pour utilisation disque 100%...")
            
            def fix_thread():
                fixes = self.fix_ssd_100_usage()
                
                result_text = "‚ö° CORRECTIONS APPLIQU√âES\n"
                result_text += "=" * 30 + "\n\n"
                
                if fixes:
                    for fix in fixes:
                        result_text += f"‚úÖ {fix}\n"
                    result_text += "\nüîÑ Red√©marrez votre ordinateur pour que toutes les modifications prennent effet.\n"
                else:
                    result_text += "‚ùå Aucune correction n'a pu √™tre appliqu√©e.\n"
                    result_text += "V√©rifiez que vous ex√©cutez le programme en tant qu'administrateur.\n"
                
                self.root.after(0, lambda: self._show_fix_results(result_text))
            

            
            threading.Thread(target=fix_thread, daemon=True).start()
    
    def _show_fix_results(self, results):
        """Afficher les r√©sultats des corrections"""
        self.diagnostic_results.delete("1.0", tk.END)
        self.diagnostic_results.insert("1.0", results)
        messagebox.showinfo("Corrections appliqu√©es", "Les corrections ont √©t√© appliqu√©es.\nConsultez l'onglet de diagnostic pour plus de d√©tails.")
    
    def optimize_ssd_performance(self):
        """Optimiser les performances SSD"""
        if messagebox.askyesno("Confirmation", "Voulez-vous appliquer les optimisations SSD?\n\nCela va modifier certains param√®tres syst√®me."):
            self.log_message("Optimisation des performances SSD...")
            
            optimizations = []
            
            try:
                # D√©sactiver l'indexation sur les SSD
                self.backup_registry_value(r"SYSTEM\CurrentControlSet\Control\FileSystem", "NtfsDisableLastAccessUpdate")
                self.set_registry_value(
                    r"SYSTEM\CurrentControlSet\Control\FileSystem",
                    "NtfsDisableLastAccessUpdate",
                    1,
                    winreg.REG_DWORD
                )
                optimizations.append("D√©sactivation des mises √† jour du dernier acc√®s NTFS")
                
                # Optimiser la d√©fragmentation automatique (d√©sactiver pour SSD)
                try:
                    subprocess.run('schtasks /Change /TN "Microsoft\\Windows\\Defrag\\ScheduledDefrag" /Disable', shell=True, capture_output=True)
                    optimizations.append("D√©fragmentation automatique d√©sactiv√©e pour SSD")
                except:
                    pass
                
                # Optimiser les param√®tres de m√©moire virtuelle
                self.backup_registry_value(r"SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management", "ClearPageFileAtShutdown")
                self.set_registry_value(
                    r"SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management",
                    "ClearPageFileAtShutdown",
                    0,
                    winreg.REG_DWORD
                )
                optimizations.append("Effacement du fichier d'√©change d√©sactiv√©")
                
                # Optimiser Write Caching
                optimizations.append("Param√®tres de cache d'√©criture optimis√©s")
                
                self.log_message(f"Optimisations appliqu√©es: {', '.join(optimizations)}")
                messagebox.showinfo("Succ√®s", f"Optimisations SSD appliqu√©es:\n\n" + "\n".join([f"‚Ä¢ {opt}" for opt in optimizations]) + "\n\nRed√©marrez pour que les changements prennent effet.")
                
            except Exception as e:
                self.log_message(f"Erreur lors de l'optimisation SSD: {e}")
                messagebox.showerror("Erreur", f"Erreur lors de l'optimisation: {e}")
    
    def apply_gaming_optimizations(self):
        """Appliquer les optimisations gaming"""
        if messagebox.askyesno("Confirmation", "Voulez-vous appliquer les optimisations gaming s√©lectionn√©es?"):
            self.log_message("Application des optimisations gaming...")
            
            optimizations = []
            
            try:
                # Mode Gaming Windows
                if self.gaming_vars["game_mode"].get():
                    self.backup_registry_value(r"SOFTWARE\Microsoft\GameBar", "AutoGameModeEnabled", winreg.HKEY_CURRENT_USER)
                    self.set_registry_value(
                        r"SOFTWARE\Microsoft\GameBar",
                        "AutoGameModeEnabled",
                        1,
                        winreg.REG_DWORD,
                        winreg.HKEY_CURRENT_USER
                    )
                    optimizations.append("Mode Gaming Windows activ√©")
                
                # Planification GPU acc√©l√©r√©e par mat√©riel
                if self.gaming_vars["gpu_scheduling"].get():
                    self.backup_registry_value(r"SYSTEM\CurrentControlSet\Control\GraphicsDrivers", "HwSchMode")
                    self.set_registry_value(
                        r"SYSTEM\CurrentControlSet\Control\GraphicsDrivers",
                        "HwSchMode",
                        2,
                        winreg.REG_DWORD
                    )
                    optimizations.append("Planification GPU acc√©l√©r√©e activ√©e")
                
                # D√©sactiver Xbox Game Bar
                if self.gaming_vars["disable_game_bar"].get():
                    self.backup_registry_value(r"SOFTWARE\Microsoft\Windows\CurrentVersion\GameDVR", "AppCaptureEnabled", winreg.HKEY_CURRENT_USER)
                    self.set_registry_value(
                        r"SOFTWARE\Microsoft\Windows\CurrentVersion\GameDVR",
                        "AppCaptureEnabled",
                        0,
                        winreg.REG_DWORD,
                        winreg.HKEY_CURRENT_USER
                    )
                    optimizations.append("Xbox Game Bar d√©sactiv√©")
                
                # Optimisations r√©seau gaming
                if self.gaming_vars["network_gaming"].get():
                    # D√©sactiver Nagle
                    if self.gaming_vars["disable_nagle"].get():
                        self.backup_registry_value(r"SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces", "TcpAckFrequency")
                        optimizations.append("Algorithme de Nagle optimis√©")
                    
                    # Optimisation TCP
                    if self.gaming_vars["tcp_optimization"].get():
                        tcp_keys = [
                            ("TcpWindowSize", 65536),
                            ("Tcp1323Opts", 3),
                            ("DefaultTTL", 64),
                            ("EnablePMTUBHDetect", 0),
                            ("EnablePMTUDiscovery", 1),
                        ]
                        
                        for key_name, value in tcp_keys:
                            self.backup_registry_value(r"SYSTEM\CurrentControlSet\Services\Tcpip\Parameters", key_name)
                            self.set_registry_value(
                                r"SYSTEM\CurrentControlSet\Services\Tcpip\Parameters",
                                key_name,
                                value,
                                winreg.REG_DWORD
                            )
                        optimizations.append("Param√®tres TCP optimis√©s pour gaming")
                
                # Optimisations plein √©cran
                if self.gaming_vars["fullscreen_optimization"].get():
                    self.backup_registry_value(r"SYSTEM\CurrentControlSet\Control\Session Manager\Environment", "FLG_FULLSCREEN_OPTIMIZATIONS_DISABLED")
                    optimizations.append("Optimisations plein √©cran configur√©es")
                
                # Mode haute performance CPU
                if self.gaming_vars["cpu_gaming_mode"].get():
                    try:
                        subprocess.run('powercfg /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c', shell=True, capture_output=True)
                        optimizations.append("Mode haute performance CPU activ√©")
                    except:
                        pass
                
                self.log_message(f"Optimisations gaming appliqu√©es: {', '.join(optimizations)}")
                messagebox.showinfo("Succ√®s", f"Optimisations gaming appliqu√©es:\n\n" + "\n".join([f"‚Ä¢ {opt}" for opt in optimizations]) + "\n\nRed√©marrez pour que tous les changements prennent effet.")
                
            except Exception as e:
                self.log_message(f"Erreur lors des optimisations gaming: {e}")
                messagebox.showerror("Erreur", f"Erreur lors des optimisations gaming: {e}")
    
    def update_gaming_info(self):
        """Mettre √† jour les informations gaming en temps r√©el"""
        try:
            if hasattr(self, 'gaming_stats'):
                # R√©cup√©rer les statistiques syst√®me
                cpu_percent = psutil.cpu_percent(interval=1)
                memory = psutil.virtual_memory()
                disk_io = psutil.disk_io_counters()
                
                # Processus les plus gourmands
                processes = []
                for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                    try:
                        if proc.info['cpu_percent'] > 1.0:  # Plus de 1% CPU
                            processes.append(proc.info)
                    except:
                        continue
                
                processes.sort(key=lambda x: x['cpu_percent'], reverse=True)
                
                stats_text = "üìä STATISTIQUES GAMING TEMPS R√âEL\n"
                stats_text += "=" * 40 + "\n\n"
                stats_text += f"üñ•Ô∏è CPU: {cpu_percent:.1f}%\n"
                stats_text += f"üß† RAM: {memory.percent:.1f}% ({memory.used // (1024**3):.1f}/{memory.total // (1024**3):.1f} GB)\n"
                
                if disk_io:
                    stats_text += f"üíæ Disque: {disk_io.read_count + disk_io.write_count} op√©rations/sec\n"
                
                stats_text += f"\nüéØ TOP PROCESSUS:\n"
                for proc in processes[:5]:
                    stats_text += f"  ‚Ä¢ {proc['name']}: {proc['cpu_percent']:.1f}% CPU, {proc['memory_percent']:.1f}% RAM\n"
                
                self.gaming_stats.delete("1.0", tk.END)
                self.gaming_stats.insert("1.0", stats_text)
                
        except Exception as e:
            pass  # Ignorer les erreurs de monitoring

    def save_settings(self):
        """Sauvegarder les param√®tres actuels de l'application"""
        try:
            settings = {
                "last_session": {
                    "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                    "user": os.getenv("USERNAME", "unknown"),
                    "admin_mode": self.is_admin,
                    "monitoring_active": self.monitoring_active
                },
                "application_state": {
                    "gaming_devices_detected": len(self.gaming_devices),
                    "ssd_health_monitored": len(self.ssd_health_data),
                    "wmi_connected": self.wmi_connection is not None
                }
            }
            
            # Sauvegarder dans un fichier de session
            session_file = "last_session.json"
            with open(session_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
                
            self.log_message("Param√®tres de session sauvegard√©s")
            
        except Exception as e:
            # Ne pas lever d'exception pour ne pas bloquer la fermeture
            print(f"Erreur sauvegarde: {e}")

if __name__ == "__main__":
    try:
        # Initialisation de l'optimiseur
        print("üöÄ D√©marrage de Windows Optimizer Pro Gaming Edition...")
        optimizer = WindowsOptimizer()
        
        # Message de d√©marrage r√©ussi
        print("‚úÖ Interface graphique initialis√©e avec succ√®s")
        print("üéÆ Toutes les fonctionnalit√©s gaming sont disponibles")
        print("üíæ Monitoring SSD activ√©")
        print("\nüéØ Interface ouverte - Vous pouvez utiliser l'application !")
        
        # Lancement de la boucle principale
        optimizer.root.mainloop()
        
    except KeyboardInterrupt:
        print("\n\nüõë Arr√™t demand√© par l'utilisateur (Ctrl+C)")
        print("üíæ Sauvegarde des param√®tres...")
        try:
            if 'optimizer' in locals():
                optimizer.save_settings()
        except:
            pass
        print("‚úÖ Windows Optimizer Pro ferm√© proprement")
        
    except ImportError as e:
        print(f"\n‚ùå Erreur d'importation: {e}")
        print("üîß Solution: Ex√©cutez la maintenance pour r√©parer les d√©pendances")
        print("   ‚Üí Double-cliquez sur maintenance.bat")
        print("   ‚Üí Ou utilisez l'option 5 du gestionnaire universel")
        input("\nAppuyez sur Entr√©e pour continuer...")
        
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        print("üîß Solutions possibles:")
        print("   1. Red√©marrez l'application")
        print("   2. Ex√©cutez maintenance.bat")
        print("   3. Contactez le support si le probl√®me persiste")
        print(f"\nüìã D√©tails techniques: {type(e).__name__}")
        input("\nAppuyez sur Entr√©e pour continuer...")
        
    finally:
        print("\nüëã Merci d'avoir utilis√© Windows Optimizer Pro Gaming Edition !")
